// Code generated by protoc-gen-gogo.
// source: github.com/openshift/api/kubecontrolplane/v1/generated.proto
// DO NOT EDIT!

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		github.com/openshift/api/kubecontrolplane/v1/generated.proto

	It has these top-level messages:
		AggregatorConfig
		Arguments
		KubeAPIServerConfig
		KubeAPIServerImagePolicyConfig
		KubeAPIServerProjectConfig
		KubeletConnectionInfo
		MasterAuthConfig
		RequestHeaderAuthenticationOptions
		UserAgentDenyRule
		UserAgentMatchRule
		UserAgentMatchingConfig
		WebhookTokenAuthenticator
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_openshift_api_osin_v1 "github.com/openshift/api/osin/v1"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *AggregatorConfig) Reset()                    { *m = AggregatorConfig{} }
func (*AggregatorConfig) ProtoMessage()               {}
func (*AggregatorConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *Arguments) Reset()                    { *m = Arguments{} }
func (*Arguments) ProtoMessage()               {}
func (*Arguments) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func (m *KubeAPIServerConfig) Reset()                    { *m = KubeAPIServerConfig{} }
func (*KubeAPIServerConfig) ProtoMessage()               {}
func (*KubeAPIServerConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{2} }

func (m *KubeAPIServerImagePolicyConfig) Reset()      { *m = KubeAPIServerImagePolicyConfig{} }
func (*KubeAPIServerImagePolicyConfig) ProtoMessage() {}
func (*KubeAPIServerImagePolicyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{3}
}

func (m *KubeAPIServerProjectConfig) Reset()      { *m = KubeAPIServerProjectConfig{} }
func (*KubeAPIServerProjectConfig) ProtoMessage() {}
func (*KubeAPIServerProjectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{4}
}

func (m *KubeletConnectionInfo) Reset()                    { *m = KubeletConnectionInfo{} }
func (*KubeletConnectionInfo) ProtoMessage()               {}
func (*KubeletConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func (m *MasterAuthConfig) Reset()                    { *m = MasterAuthConfig{} }
func (*MasterAuthConfig) ProtoMessage()               {}
func (*MasterAuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *RequestHeaderAuthenticationOptions) Reset()      { *m = RequestHeaderAuthenticationOptions{} }
func (*RequestHeaderAuthenticationOptions) ProtoMessage() {}
func (*RequestHeaderAuthenticationOptions) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{7}
}

func (m *UserAgentDenyRule) Reset()                    { *m = UserAgentDenyRule{} }
func (*UserAgentDenyRule) ProtoMessage()               {}
func (*UserAgentDenyRule) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *UserAgentMatchRule) Reset()                    { *m = UserAgentMatchRule{} }
func (*UserAgentMatchRule) ProtoMessage()               {}
func (*UserAgentMatchRule) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

func (m *UserAgentMatchingConfig) Reset()      { *m = UserAgentMatchingConfig{} }
func (*UserAgentMatchingConfig) ProtoMessage() {}
func (*UserAgentMatchingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{10}
}

func (m *WebhookTokenAuthenticator) Reset()      { *m = WebhookTokenAuthenticator{} }
func (*WebhookTokenAuthenticator) ProtoMessage() {}
func (*WebhookTokenAuthenticator) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{11}
}

func init() {
	proto.RegisterType((*AggregatorConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.AggregatorConfig")
	proto.RegisterType((*Arguments)(nil), "github.com.openshift.api.kubecontrolplane.v1.Arguments")
	proto.RegisterType((*KubeAPIServerConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.KubeAPIServerConfig")
	proto.RegisterType((*KubeAPIServerImagePolicyConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.KubeAPIServerImagePolicyConfig")
	proto.RegisterType((*KubeAPIServerProjectConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.KubeAPIServerProjectConfig")
	proto.RegisterType((*KubeletConnectionInfo)(nil), "github.com.openshift.api.kubecontrolplane.v1.KubeletConnectionInfo")
	proto.RegisterType((*MasterAuthConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.MasterAuthConfig")
	proto.RegisterType((*RequestHeaderAuthenticationOptions)(nil), "github.com.openshift.api.kubecontrolplane.v1.RequestHeaderAuthenticationOptions")
	proto.RegisterType((*UserAgentDenyRule)(nil), "github.com.openshift.api.kubecontrolplane.v1.UserAgentDenyRule")
	proto.RegisterType((*UserAgentMatchRule)(nil), "github.com.openshift.api.kubecontrolplane.v1.UserAgentMatchRule")
	proto.RegisterType((*UserAgentMatchingConfig)(nil), "github.com.openshift.api.kubecontrolplane.v1.UserAgentMatchingConfig")
	proto.RegisterType((*WebhookTokenAuthenticator)(nil), "github.com.openshift.api.kubecontrolplane.v1.WebhookTokenAuthenticator")
}
func (m *AggregatorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregatorConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ProxyClientInfo.Size()))
	n1, err := m.ProxyClientInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m Arguments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m Arguments) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m) > 0 {
		for _, s := range m {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *KubeAPIServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeAPIServerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.GenericAPIServerConfig.Size()))
	n2, err := m.GenericAPIServerConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AuthConfig.Size()))
	n3, err := m.AuthConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AggregatorConfig.Size()))
	n4, err := m.AggregatorConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.KubeletClientInfo.Size()))
	n5, err := m.KubeletClientInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesSubnet)))
	i += copy(dAtA[i:], m.ServicesSubnet)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServicesNodePortRange)))
	i += copy(dAtA[i:], m.ServicesNodePortRange)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.UserAgentMatchingConfig.Size()))
	n6, err := m.UserAgentMatchingConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ImagePolicyConfig.Size()))
	n7, err := m.ImagePolicyConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ProjectConfig.Size()))
	n8, err := m.ProjectConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.ServiceAccountPublicKeyFiles) > 0 {
		for _, s := range m.ServiceAccountPublicKeyFiles {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.OAuthConfig != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.OAuthConfig.Size()))
		n9, err := m.OAuthConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.APIServerArguments) > 0 {
		keysForAPIServerArguments := make([]string, 0, len(m.APIServerArguments))
		for k := range m.APIServerArguments {
			keysForAPIServerArguments = append(keysForAPIServerArguments, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAPIServerArguments)
		for _, k := range keysForAPIServerArguments {
			dAtA[i] = 0x72
			i++
			v := m.APIServerArguments[string(k)]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovGenerated(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + msgSize
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64((&v).Size()))
			n10, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n10
		}
	}
	dAtA[i] = 0x7a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConsolePublicURL)))
	i += copy(dAtA[i:], m.ConsolePublicURL)
	return i, nil
}

func (m *KubeAPIServerImagePolicyConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeAPIServerImagePolicyConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InternalRegistryHostname)))
	i += copy(dAtA[i:], m.InternalRegistryHostname)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalRegistryHostname)))
	i += copy(dAtA[i:], m.ExternalRegistryHostname)
	return i, nil
}

func (m *KubeAPIServerProjectConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeAPIServerProjectConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DefaultNodeSelector)))
	i += copy(dAtA[i:], m.DefaultNodeSelector)
	return i, nil
}

func (m *KubeletConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeletConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Port))
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CertInfo.Size()))
	n11, err := m.CertInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *MasterAuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterAuthConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.RequestHeader.Size()))
		n12, err := m.RequestHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.WebhookTokenAuthenticators) > 0 {
		for _, msg := range m.WebhookTokenAuthenticators {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OAuthMetadataFile)))
	i += copy(dAtA[i:], m.OAuthMetadataFile)
	return i, nil
}

func (m *RequestHeaderAuthenticationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeaderAuthenticationOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCA)))
	i += copy(dAtA[i:], m.ClientCA)
	if len(m.ClientCommonNames) > 0 {
		for _, s := range m.ClientCommonNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.UsernameHeaders) > 0 {
		for _, s := range m.UsernameHeaders {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GroupHeaders) > 0 {
		for _, s := range m.GroupHeaders {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExtraHeaderPrefixes) > 0 {
		for _, s := range m.ExtraHeaderPrefixes {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserAgentDenyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAgentDenyRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.UserAgentMatchRule.Size()))
	n13, err := m.UserAgentMatchRule.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RejectionMessage)))
	i += copy(dAtA[i:], m.RejectionMessage)
	return i, nil
}

func (m *UserAgentMatchRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAgentMatchRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Regex)))
	i += copy(dAtA[i:], m.Regex)
	if len(m.HTTPVerbs) > 0 {
		for _, s := range m.HTTPVerbs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserAgentMatchingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAgentMatchingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequiredClients) > 0 {
		for _, msg := range m.RequiredClients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeniedClients) > 0 {
		for _, msg := range m.DeniedClients {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DefaultRejectionMessage)))
	i += copy(dAtA[i:], m.DefaultRejectionMessage)
	return i, nil
}

func (m *WebhookTokenAuthenticator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebhookTokenAuthenticator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConfigFile)))
	i += copy(dAtA[i:], m.ConfigFile)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CacheTTL)))
	i += copy(dAtA[i:], m.CacheTTL)
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AggregatorConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ProxyClientInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m Arguments) Size() (n int) {
	var l int
	_ = l
	if len(m) > 0 {
		for _, s := range m {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeAPIServerConfig) Size() (n int) {
	var l int
	_ = l
	l = m.GenericAPIServerConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.AuthConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.AggregatorConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.KubeletClientInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServicesSubnet)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServicesNodePortRange)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.UserAgentMatchingConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ImagePolicyConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ProjectConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ServiceAccountPublicKeyFiles) > 0 {
		for _, s := range m.ServiceAccountPublicKeyFiles {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.OAuthConfig != nil {
		l = m.OAuthConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.APIServerArguments) > 0 {
		for k, v := range m.APIServerArguments {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.ConsolePublicURL)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeAPIServerImagePolicyConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.InternalRegistryHostname)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExternalRegistryHostname)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeAPIServerProjectConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.DefaultNodeSelector)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeletConnectionInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Port))
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CertInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *MasterAuthConfig) Size() (n int) {
	var l int
	_ = l
	if m.RequestHeader != nil {
		l = m.RequestHeader.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.WebhookTokenAuthenticators) > 0 {
		for _, e := range m.WebhookTokenAuthenticators {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.OAuthMetadataFile)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RequestHeaderAuthenticationOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientCA)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ClientCommonNames) > 0 {
		for _, s := range m.ClientCommonNames {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.UsernameHeaders) > 0 {
		for _, s := range m.UsernameHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.GroupHeaders) > 0 {
		for _, s := range m.GroupHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ExtraHeaderPrefixes) > 0 {
		for _, s := range m.ExtraHeaderPrefixes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UserAgentDenyRule) Size() (n int) {
	var l int
	_ = l
	l = m.UserAgentMatchRule.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RejectionMessage)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *UserAgentMatchRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Regex)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.HTTPVerbs) > 0 {
		for _, s := range m.HTTPVerbs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UserAgentMatchingConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.RequiredClients) > 0 {
		for _, e := range m.RequiredClients {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.DeniedClients) > 0 {
		for _, e := range m.DeniedClients {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.DefaultRejectionMessage)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *WebhookTokenAuthenticator) Size() (n int) {
	var l int
	_ = l
	l = len(m.ConfigFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CacheTTL)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AggregatorConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AggregatorConfig{`,
		`ProxyClientInfo:` + strings.Replace(strings.Replace(this.ProxyClientInfo.String(), "CertInfo", "github_com_openshift_api_config_v1.CertInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeAPIServerConfig) String() string {
	if this == nil {
		return "nil"
	}
	keysForAPIServerArguments := make([]string, 0, len(this.APIServerArguments))
	for k := range this.APIServerArguments {
		keysForAPIServerArguments = append(keysForAPIServerArguments, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAPIServerArguments)
	mapStringForAPIServerArguments := "map[string]Arguments{"
	for _, k := range keysForAPIServerArguments {
		mapStringForAPIServerArguments += fmt.Sprintf("%v: %v,", k, this.APIServerArguments[k])
	}
	mapStringForAPIServerArguments += "}"
	s := strings.Join([]string{`&KubeAPIServerConfig{`,
		`GenericAPIServerConfig:` + strings.Replace(strings.Replace(this.GenericAPIServerConfig.String(), "GenericAPIServerConfig", "github_com_openshift_api_config_v1.GenericAPIServerConfig", 1), `&`, ``, 1) + `,`,
		`AuthConfig:` + strings.Replace(strings.Replace(this.AuthConfig.String(), "MasterAuthConfig", "MasterAuthConfig", 1), `&`, ``, 1) + `,`,
		`AggregatorConfig:` + strings.Replace(strings.Replace(this.AggregatorConfig.String(), "AggregatorConfig", "AggregatorConfig", 1), `&`, ``, 1) + `,`,
		`KubeletClientInfo:` + strings.Replace(strings.Replace(this.KubeletClientInfo.String(), "KubeletConnectionInfo", "KubeletConnectionInfo", 1), `&`, ``, 1) + `,`,
		`ServicesSubnet:` + fmt.Sprintf("%v", this.ServicesSubnet) + `,`,
		`ServicesNodePortRange:` + fmt.Sprintf("%v", this.ServicesNodePortRange) + `,`,
		`UserAgentMatchingConfig:` + strings.Replace(strings.Replace(this.UserAgentMatchingConfig.String(), "UserAgentMatchingConfig", "UserAgentMatchingConfig", 1), `&`, ``, 1) + `,`,
		`ImagePolicyConfig:` + strings.Replace(strings.Replace(this.ImagePolicyConfig.String(), "KubeAPIServerImagePolicyConfig", "KubeAPIServerImagePolicyConfig", 1), `&`, ``, 1) + `,`,
		`ProjectConfig:` + strings.Replace(strings.Replace(this.ProjectConfig.String(), "KubeAPIServerProjectConfig", "KubeAPIServerProjectConfig", 1), `&`, ``, 1) + `,`,
		`ServiceAccountPublicKeyFiles:` + fmt.Sprintf("%v", this.ServiceAccountPublicKeyFiles) + `,`,
		`OAuthConfig:` + strings.Replace(fmt.Sprintf("%v", this.OAuthConfig), "OAuthConfig", "github_com_openshift_api_osin_v1.OAuthConfig", 1) + `,`,
		`APIServerArguments:` + mapStringForAPIServerArguments + `,`,
		`ConsolePublicURL:` + fmt.Sprintf("%v", this.ConsolePublicURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeAPIServerImagePolicyConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeAPIServerImagePolicyConfig{`,
		`InternalRegistryHostname:` + fmt.Sprintf("%v", this.InternalRegistryHostname) + `,`,
		`ExternalRegistryHostname:` + fmt.Sprintf("%v", this.ExternalRegistryHostname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeAPIServerProjectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeAPIServerProjectConfig{`,
		`DefaultNodeSelector:` + fmt.Sprintf("%v", this.DefaultNodeSelector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeletConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeletConnectionInfo{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`CertInfo:` + strings.Replace(strings.Replace(this.CertInfo.String(), "CertInfo", "github_com_openshift_api_config_v1.CertInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MasterAuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MasterAuthConfig{`,
		`RequestHeader:` + strings.Replace(fmt.Sprintf("%v", this.RequestHeader), "RequestHeaderAuthenticationOptions", "RequestHeaderAuthenticationOptions", 1) + `,`,
		`WebhookTokenAuthenticators:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.WebhookTokenAuthenticators), "WebhookTokenAuthenticator", "WebhookTokenAuthenticator", 1), `&`, ``, 1) + `,`,
		`OAuthMetadataFile:` + fmt.Sprintf("%v", this.OAuthMetadataFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestHeaderAuthenticationOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHeaderAuthenticationOptions{`,
		`ClientCA:` + fmt.Sprintf("%v", this.ClientCA) + `,`,
		`ClientCommonNames:` + fmt.Sprintf("%v", this.ClientCommonNames) + `,`,
		`UsernameHeaders:` + fmt.Sprintf("%v", this.UsernameHeaders) + `,`,
		`GroupHeaders:` + fmt.Sprintf("%v", this.GroupHeaders) + `,`,
		`ExtraHeaderPrefixes:` + fmt.Sprintf("%v", this.ExtraHeaderPrefixes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserAgentDenyRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserAgentDenyRule{`,
		`UserAgentMatchRule:` + strings.Replace(strings.Replace(this.UserAgentMatchRule.String(), "UserAgentMatchRule", "UserAgentMatchRule", 1), `&`, ``, 1) + `,`,
		`RejectionMessage:` + fmt.Sprintf("%v", this.RejectionMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserAgentMatchRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserAgentMatchRule{`,
		`Regex:` + fmt.Sprintf("%v", this.Regex) + `,`,
		`HTTPVerbs:` + fmt.Sprintf("%v", this.HTTPVerbs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserAgentMatchingConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserAgentMatchingConfig{`,
		`RequiredClients:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.RequiredClients), "UserAgentMatchRule", "UserAgentMatchRule", 1), `&`, ``, 1) + `,`,
		`DeniedClients:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.DeniedClients), "UserAgentDenyRule", "UserAgentDenyRule", 1), `&`, ``, 1) + `,`,
		`DefaultRejectionMessage:` + fmt.Sprintf("%v", this.DefaultRejectionMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebhookTokenAuthenticator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebhookTokenAuthenticator{`,
		`ConfigFile:` + fmt.Sprintf("%v", this.ConfigFile) + `,`,
		`CacheTTL:` + fmt.Sprintf("%v", this.CacheTTL) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AggregatorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregatorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregatorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProxyClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arguments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arguments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arguments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			*m = append(*m, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeAPIServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeAPIServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeAPIServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericAPIServerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenericAPIServerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuthConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AggregatorConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KubeletClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesSubnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesSubnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesNodePortRange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesNodePortRange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgentMatchingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserAgentMatchingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePolicyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ImagePolicyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProjectConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountPublicKeyFiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountPublicKeyFiles = append(m.ServiceAccountPublicKeyFiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OAuthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OAuthConfig == nil {
				m.OAuthConfig = &github_com_openshift_api_osin_v1.OAuthConfig{}
			}
			if err := m.OAuthConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIServerArguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGenerated
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.APIServerArguments == nil {
				m.APIServerArguments = make(map[string]Arguments)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Arguments{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.APIServerArguments[mapkey] = *mapvalue
			} else {
				var mapvalue Arguments
				m.APIServerArguments[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsolePublicURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsolePublicURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeAPIServerImagePolicyConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeAPIServerImagePolicyConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeAPIServerImagePolicyConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalRegistryHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalRegistryHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRegistryHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRegistryHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeAPIServerProjectConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeAPIServerProjectConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeAPIServerProjectConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultNodeSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultNodeSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeletConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeletConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeletConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterAuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterAuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterAuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestHeader == nil {
				m.RequestHeader = &RequestHeaderAuthenticationOptions{}
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookTokenAuthenticators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebhookTokenAuthenticators = append(m.WebhookTokenAuthenticators, WebhookTokenAuthenticator{})
			if err := m.WebhookTokenAuthenticators[len(m.WebhookTokenAuthenticators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OAuthMetadataFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OAuthMetadataFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeaderAuthenticationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeaderAuthenticationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeaderAuthenticationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCommonNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCommonNames = append(m.ClientCommonNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsernameHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsernameHeaders = append(m.UsernameHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupHeaders = append(m.GroupHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraHeaderPrefixes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraHeaderPrefixes = append(m.ExtraHeaderPrefixes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAgentDenyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAgentDenyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAgentDenyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgentMatchRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserAgentMatchRule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectionMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectionMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAgentMatchRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAgentMatchRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAgentMatchRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPVerbs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HTTPVerbs = append(m.HTTPVerbs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAgentMatchingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAgentMatchingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAgentMatchingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredClients = append(m.RequiredClients, UserAgentMatchRule{})
			if err := m.RequiredClients[len(m.RequiredClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeniedClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeniedClients = append(m.DeniedClients, UserAgentDenyRule{})
			if err := m.DeniedClients[len(m.DeniedClients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultRejectionMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultRejectionMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebhookTokenAuthenticator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebhookTokenAuthenticator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebhookTokenAuthenticator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/openshift/api/kubecontrolplane/v1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 1488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0x3a, 0xc9, 0x57, 0xf1, 0xa4, 0x6e, 0x92, 0x89, 0xd2, 0xb8, 0xfe, 0xf6, 0x6b, 0x5b,
	0xfe, 0x5e, 0x22, 0xd1, 0xda, 0x24, 0x54, 0xa5, 0xaa, 0xa0, 0x60, 0x3b, 0x21, 0x89, 0xd2, 0xb4,
	0xd6, 0x24, 0x05, 0xb5, 0xe2, 0xc0, 0x78, 0xfd, 0xb2, 0xde, 0xc6, 0x9e, 0x31, 0xb3, 0xb3, 0x21,
	0x96, 0x00, 0x55, 0x2a, 0x1c, 0x90, 0x38, 0x20, 0xa4, 0x4a, 0x1c, 0x7b, 0xe1, 0xc4, 0x89, 0x7f,
	0x81, 0x53, 0x8f, 0xbd, 0xd1, 0x43, 0x15, 0x51, 0x73, 0xe1, 0x4f, 0xe0, 0x88, 0x76, 0x76, 0xb2,
	0xb6, 0xd7, 0xbb, 0x01, 0xb7, 0x5c, 0x2c, 0xfb, 0xfd, 0xf8, 0xbc, 0xcf, 0x9b, 0x79, 0xf3, 0xde,
	0x33, 0x7a, 0xc7, 0xb2, 0x65, 0xd3, 0xad, 0x17, 0x4d, 0xde, 0x2e, 0xf1, 0x0e, 0x30, 0xa7, 0x69,
	0x1f, 0xc8, 0x12, 0xed, 0xd8, 0xa5, 0x43, 0xb7, 0x0e, 0x26, 0x67, 0x52, 0xf0, 0x56, 0xa7, 0x45,
	0x19, 0x94, 0x8e, 0x56, 0x4b, 0x16, 0x30, 0x10, 0x54, 0x42, 0xa3, 0xd8, 0x11, 0x5c, 0x72, 0x7c,
	0xb9, 0xef, 0x5d, 0x0c, 0xbc, 0x8b, 0xb4, 0x63, 0x17, 0xc3, 0xde, 0xc5, 0xa3, 0xd5, 0xcc, 0x95,
	0x81, 0x58, 0x16, 0xb7, 0x78, 0x49, 0x81, 0xd4, 0xdd, 0x03, 0xf5, 0x4b, 0xfd, 0x50, 0xdf, 0x7c,
	0xf0, 0xcc, 0x5a, 0x2c, 0x35, 0x93, 0xb3, 0x03, 0xdb, 0x8a, 0x20, 0x94, 0x79, 0x33, 0xd6, 0x87,
	0x3b, 0x36, 0x8b, 0xf2, 0xb8, 0x7a, 0x78, 0xdd, 0x29, 0xda, 0xdc, 0xb3, 0x69, 0x53, 0xb3, 0x69,
	0x33, 0x10, 0xdd, 0x52, 0xe7, 0xd0, 0xf2, 0x04, 0x4e, 0xa9, 0x0d, 0x92, 0x46, 0x79, 0x5d, 0x8b,
	0xf3, 0x12, 0x2e, 0x93, 0x76, 0x1b, 0x4a, 0x8e, 0xd9, 0x84, 0x36, 0x1d, 0xf1, 0x7b, 0x2b, 0xce,
	0xcf, 0x95, 0x76, 0xab, 0x64, 0x33, 0xe9, 0x48, 0x11, 0x76, 0x2a, 0x3c, 0x32, 0xd0, 0x7c, 0xd9,
	0xb2, 0x04, 0x58, 0x54, 0x72, 0x51, 0x55, 0xc9, 0x63, 0x8e, 0xe6, 0x3a, 0x82, 0x1f, 0x77, 0xab,
	0x2d, 0x1b, 0x98, 0xdc, 0x66, 0x07, 0x3c, 0x6d, 0xe4, 0x8d, 0x95, 0xd9, 0xb5, 0xcb, 0xc5, 0xd8,
	0x4b, 0xf1, 0xcf, 0xad, 0x78, 0xb4, 0x5a, 0xac, 0x82, 0x50, 0x3e, 0x95, 0xe5, 0xa7, 0x27, 0xb9,
	0x89, 0xde, 0x49, 0x6e, 0xae, 0x36, 0x0c, 0x46, 0xc2, 0xe8, 0x85, 0x6b, 0x28, 0x59, 0x16, 0x96,
	0xdb, 0x06, 0x26, 0x1d, 0x9c, 0x43, 0xd3, 0xb6, 0x84, 0xb6, 0x93, 0x36, 0xf2, 0x93, 0x2b, 0xc9,
	0x4a, 0xb2, 0x77, 0x92, 0x9b, 0xde, 0xf6, 0x04, 0xc4, 0x97, 0xdf, 0x98, 0xf9, 0xe1, 0x49, 0x6e,
	0xe2, 0xe1, 0x8b, 0xfc, 0x44, 0xe1, 0x97, 0x14, 0x5a, 0xdc, 0x71, 0xeb, 0x50, 0xae, 0x6d, 0xef,
	0x81, 0x38, 0x82, 0xd3, 0x04, 0xbe, 0x37, 0xd0, 0x05, 0x95, 0xa9, 0x6d, 0x86, 0x54, 0x3a, 0x91,
	0x1b, 0xff, 0x24, 0x91, 0xcd, 0x48, 0x84, 0x4a, 0x56, 0xa7, 0x75, 0x21, 0x5a, 0x4f, 0x62, 0x22,
	0x63, 0x81, 0x10, 0x75, 0x65, 0x53, 0xf3, 0x48, 0x28, 0x1e, 0x37, 0x8b, 0xe3, 0x54, 0x79, 0x71,
	0x97, 0x3a, 0x12, 0x44, 0x39, 0x40, 0xa9, 0x60, 0xcd, 0x05, 0xf5, 0x65, 0x64, 0x20, 0x0a, 0xfe,
	0xca, 0x40, 0xf3, 0x34, 0x74, 0xbd, 0xe9, 0xc9, 0x57, 0x09, 0x1d, 0x2e, 0x92, 0x4a, 0x5a, 0x87,
	0x1e, 0x29, 0x1f, 0x32, 0x12, 0x11, 0x7f, 0x6b, 0xa0, 0x05, 0x0f, 0xb4, 0x05, 0x72, 0xa0, 0xa6,
	0xa6, 0x14, 0x8f, 0xea, 0x78, 0x3c, 0x76, 0x34, 0x0c, 0x67, 0x0c, 0x4c, 0x69, 0x73, 0xa6, 0x4a,
	0xed, 0xa2, 0x26, 0xb3, 0xb0, 0x13, 0x8e, 0x42, 0x46, 0x03, 0xe3, 0x9b, 0xe8, 0xbc, 0x03, 0xe2,
	0xc8, 0x36, 0xc1, 0xd9, 0x73, 0xeb, 0x0c, 0x64, 0x7a, 0x3a, 0x6f, 0xac, 0x24, 0x2b, 0x17, 0x34,
	0xca, 0xf9, 0xbd, 0x21, 0x2d, 0x09, 0x59, 0xe3, 0x3d, 0xb4, 0x74, 0x2a, 0xb9, 0xcd, 0x1b, 0x50,
	0xe3, 0x42, 0x12, 0xca, 0x2c, 0x48, 0xff, 0x47, 0xc1, 0xfc, 0x4f, 0xc3, 0x2c, 0xed, 0x45, 0x19,
	0x91, 0x68, 0x5f, 0xfc, 0xc4, 0x40, 0xcb, 0xae, 0x03, 0xa2, 0x6c, 0x01, 0x93, 0xbb, 0x54, 0x7a,
	0x2f, 0xd8, 0xd2, 0x37, 0x36, 0xa3, 0x4e, 0x6a, 0x63, 0xbc, 0x93, 0xba, 0x1b, 0x0d, 0x56, 0xc9,
	0x69, 0x7a, 0xcb, 0x31, 0x06, 0x24, 0x8e, 0x06, 0x7e, 0x6c, 0xa0, 0x05, 0xbb, 0x4d, 0x2d, 0xa8,
	0xf1, 0x96, 0x6d, 0x76, 0x35, 0xb9, 0xa4, 0x22, 0x77, 0x6b, 0xfc, 0x6b, 0x0c, 0x1e, 0xc8, 0x76,
	0x18, 0xb3, 0x7f, 0x9f, 0x23, 0x2a, 0x32, 0xca, 0x00, 0x7f, 0x6d, 0xa0, 0x54, 0x47, 0xf0, 0x07,
	0x60, 0x4a, 0xcd, 0x09, 0x29, 0x4e, 0x5b, 0xaf, 0xc1, 0xa9, 0x36, 0x88, 0x57, 0x59, 0xd2, 0x7c,
	0x52, 0x43, 0x62, 0x32, 0x1c, 0x15, 0x37, 0xd0, 0x25, 0x7d, 0xb7, 0x65, 0xd3, 0xe4, 0x2e, 0x93,
	0x35, 0xb7, 0xde, 0xb2, 0xcd, 0x1d, 0xe8, 0x7e, 0x60, 0xb7, 0xc0, 0x49, 0xcf, 0xaa, 0x86, 0x96,
	0xef, 0x9d, 0xe4, 0x2e, 0xed, 0x9d, 0x61, 0x47, 0xce, 0x44, 0xc1, 0x9f, 0xa0, 0x59, 0x3e, 0xd0,
	0x48, 0x52, 0x2a, 0xd5, 0x2b, 0xf1, 0xa9, 0x7a, 0xd3, 0xc9, 0x4b, 0xef, 0xce, 0x40, 0xdf, 0x98,
	0xeb, 0x9d, 0xe4, 0x66, 0x07, 0x04, 0x64, 0x10, 0x12, 0xff, 0x68, 0x20, 0x4c, 0x3b, 0xb6, 0x7f,
	0x10, 0x41, 0x63, 0x4e, 0x9f, 0xcf, 0x4f, 0xae, 0xcc, 0xae, 0xdd, 0x7b, 0x8d, 0x43, 0xf5, 0xf1,
	0x8b, 0xe5, 0x11, 0xec, 0x0d, 0x26, 0x45, 0xb7, 0x92, 0xd1, 0xa7, 0x8c, 0x03, 0x87, 0xc0, 0x80,
	0x44, 0x10, 0xc2, 0xeb, 0x68, 0xde, 0xe4, 0xcc, 0xe1, 0x2d, 0xf0, 0x8f, 0xe8, 0x2e, 0xb9, 0x95,
	0x9e, 0x53, 0x4f, 0x30, 0x68, 0x4e, 0xd5, 0x90, 0x9e, 0x8c, 0x78, 0x64, 0xbe, 0x44, 0xcb, 0x31,
	0x84, 0xf0, 0x3c, 0x9a, 0x3c, 0x84, 0xae, 0x9a, 0x19, 0x49, 0xe2, 0x7d, 0xc5, 0xbb, 0x68, 0xfa,
	0x88, 0xb6, 0x5c, 0xd0, 0xfd, 0xfb, 0xed, 0x31, 0x9b, 0x68, 0x90, 0x8e, 0x8f, 0x72, 0x23, 0x71,
	0xdd, 0x28, 0xbc, 0x30, 0x50, 0xf6, 0xec, 0xe7, 0x80, 0x3f, 0x46, 0x69, 0x9b, 0x49, 0x10, 0x8c,
	0xb6, 0x08, 0x58, 0xb6, 0x23, 0x45, 0x77, 0x8b, 0x3b, 0x92, 0xd1, 0x36, 0xf8, 0xe4, 0x2a, 0x79,
	0x9d, 0x70, 0x7a, 0x3b, 0xc6, 0x8e, 0xc4, 0x22, 0x78, 0xe8, 0x70, 0x1c, 0x83, 0x9e, 0x18, 0x46,
	0xdf, 0x38, 0x8e, 0x43, 0x8f, 0x43, 0x28, 0x1c, 0xa2, 0x4c, 0xfc, 0xc3, 0xc2, 0xbb, 0x68, 0xb1,
	0x01, 0x07, 0xd4, 0x6d, 0x49, 0xaf, 0x1b, 0xee, 0x41, 0x0b, 0x4c, 0xc9, 0x85, 0x4e, 0xea, 0xbf,
	0x3a, 0xec, 0xe2, 0xfa, 0xa8, 0x09, 0x89, 0xf2, 0x2b, 0xfc, 0x6c, 0xa0, 0xa5, 0xc8, 0x09, 0x81,
	0xf3, 0x68, 0xaa, 0xc3, 0x85, 0x54, 0xc8, 0xa9, 0xca, 0x39, 0x8d, 0x3c, 0xa5, 0xfa, 0xaf, 0xd2,
	0xe0, 0x0c, 0x4a, 0x98, 0x54, 0x27, 0x8c, 0xb4, 0x3e, 0x51, 0x2d, 0x93, 0x84, 0x49, 0xf1, 0x7d,
	0x34, 0x63, 0xea, 0xb5, 0x46, 0x8f, 0xcf, 0xf1, 0x56, 0xa1, 0x79, 0x8d, 0x37, 0x73, 0x2a, 0x21,
	0x01, 0x5e, 0xe1, 0xf1, 0x24, 0x9a, 0x0f, 0x0f, 0x76, 0xfc, 0x8d, 0x81, 0x52, 0x02, 0x3e, 0x75,
	0xc1, 0x91, 0x5b, 0x40, 0x1b, 0x20, 0xf4, 0xe2, 0x52, 0x1b, 0xaf, 0xe0, 0xc8, 0x20, 0x84, 0x07,
	0x0f, 0x4c, 0xda, 0x26, 0xf5, 0x4e, 0xe5, 0x4e, 0xc7, 0xfb, 0x74, 0x2a, 0x0b, 0x5e, 0x5b, 0x1b,
	0xb2, 0x23, 0xc3, 0x91, 0xf1, 0x4f, 0x06, 0xca, 0x7c, 0x06, 0xf5, 0x26, 0xe7, 0x87, 0xfb, 0xfc,
	0x10, 0xd8, 0x00, 0x0e, 0x17, 0x4e, 0x3a, 0xa1, 0xda, 0xc2, 0xe6, 0x78, 0xc4, 0x3e, 0x8a, 0xc3,
	0xab, 0x14, 0xf4, 0x51, 0x65, 0x62, 0x4d, 0x1c, 0x72, 0x06, 0x1d, 0xbc, 0x89, 0x16, 0x54, 0x2f,
	0xdb, 0x05, 0x49, 0x1b, 0x54, 0x52, 0xaf, 0x69, 0xaa, 0x3b, 0x4b, 0xf6, 0xa7, 0x8a, 0xea, 0x7c,
	0x83, 0x06, 0x64, 0xd4, 0xa7, 0xf0, 0x6b, 0x02, 0x15, 0xfe, 0xfe, 0xfc, 0xf0, 0x65, 0x34, 0x63,
	0xaa, 0xd5, 0xa2, 0x5a, 0xd6, 0x65, 0xdb, 0xbf, 0x6c, 0x2d, 0x27, 0x81, 0x05, 0xae, 0xa2, 0x05,
	0xfd, 0x9d, 0xb7, 0xdb, 0x9c, 0xdd, 0xa6, 0x6d, 0xf0, 0x4f, 0x30, 0x59, 0x59, 0xf2, 0x98, 0x55,
	0xc3, 0x4a, 0x32, 0x6a, 0x8f, 0xdf, 0x45, 0x73, 0xde, 0x88, 0xf6, 0x9e, 0x97, 0xcf, 0xcc, 0x49,
	0x4f, 0x2a, 0x88, 0x45, 0x6f, 0xdb, 0xbe, 0x3b, 0xac, 0x22, 0x61, 0x5b, 0x7c, 0x15, 0x9d, 0xb3,
	0x04, 0x77, 0x3b, 0xa7, 0xbe, 0x53, 0xca, 0x77, 0xbe, 0x77, 0x92, 0x3b, 0xb7, 0x39, 0x20, 0x27,
	0x43, 0x56, 0x78, 0x1b, 0x2d, 0xc2, 0xb1, 0x14, 0xd4, 0xff, 0x5d, 0x13, 0x70, 0x60, 0x1f, 0x83,
	0x93, 0x9e, 0x56, 0xce, 0xcb, 0xde, 0x2b, 0xdd, 0x18, 0x55, 0x93, 0x28, 0x9f, 0xc2, 0x1f, 0x06,
	0x5a, 0x08, 0x96, 0x8f, 0x75, 0x60, 0x5d, 0xe2, 0xb6, 0xc0, 0x5b, 0x12, 0xf1, 0xf0, 0xe6, 0xe1,
	0x89, 0x75, 0xdd, 0xbf, 0xff, 0x3a, 0xbb, 0x8f, 0x87, 0xd3, 0x1f, 0x2e, 0xa3, 0x3a, 0x12, 0x11,
	0xd7, 0x1b, 0x2e, 0x02, 0x1e, 0xf8, 0x1d, 0x64, 0x17, 0x1c, 0x87, 0x5a, 0xa7, 0xdd, 0x30, 0x18,
	0x2e, 0x24, 0xa4, 0x27, 0x23, 0x1e, 0x85, 0x03, 0x14, 0x11, 0x0f, 0xff, 0x1f, 0x4d, 0x0b, 0xb0,
	0xe0, 0x58, 0x17, 0x4c, 0x4a, 0x03, 0x4e, 0x13, 0x4f, 0x48, 0x7c, 0x1d, 0x7e, 0x03, 0x25, 0x9b,
	0x52, 0x76, 0x3e, 0x04, 0x51, 0x3f, 0x2d, 0x91, 0x54, 0xef, 0x24, 0x97, 0xdc, 0xda, 0xdf, 0xaf,
	0x29, 0x21, 0xe9, 0xeb, 0x0b, 0x7f, 0x26, 0x50, 0xdc, 0x3e, 0x87, 0x1f, 0x19, 0x68, 0xce, 0x7b,
	0xd1, 0xb6, 0x80, 0x86, 0x5f, 0x5f, 0xfe, 0x7f, 0xab, 0x7f, 0xe3, 0x54, 0x83, 0xff, 0x78, 0x64,
	0x38, 0x00, 0x09, 0x47, 0xc4, 0x9f, 0xa3, 0x54, 0x03, 0x98, 0xdd, 0xa7, 0xe0, 0xf7, 0x8d, 0xf7,
	0x5e, 0x91, 0xc2, 0x69, 0xd9, 0xf4, 0x57, 0xb3, 0xf5, 0x41, 0x74, 0x32, 0x1c, 0x0c, 0xdf, 0x43,
	0xcb, 0x7a, 0x5e, 0x84, 0x2f, 0x4d, 0xf7, 0x86, 0x60, 0x2b, 0x5e, 0x8f, 0x36, 0x23, 0x71, 0xfe,
	0x85, 0x2f, 0xd0, 0xc5, 0xd8, 0x56, 0x85, 0xd7, 0x10, 0xf2, 0xc7, 0x81, 0x6a, 0x43, 0xfe, 0x75,
	0x07, 0x7f, 0xda, 0xaa, 0x81, 0x86, 0x0c, 0x58, 0xa9, 0x8e, 0x42, 0xcd, 0x26, 0xec, 0xef, 0xdf,
	0xd2, 0x15, 0xd7, 0xef, 0x28, 0x5a, 0x4e, 0x02, 0x8b, 0xca, 0xca, 0xd3, 0x97, 0xd9, 0x89, 0x67,
	0x2f, 0xb3, 0x13, 0xcf, 0x5f, 0x66, 0x27, 0x1e, 0xf6, 0xb2, 0xc6, 0xd3, 0x5e, 0xd6, 0x78, 0xd6,
	0xcb, 0x1a, 0xcf, 0x7b, 0x59, 0xe3, 0xb7, 0x5e, 0xd6, 0xf8, 0xee, 0xf7, 0xec, 0xc4, 0xfd, 0xc4,
	0xd1, 0xea, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xce, 0x38, 0x12, 0x90, 0x11, 0x00, 0x00,
}
