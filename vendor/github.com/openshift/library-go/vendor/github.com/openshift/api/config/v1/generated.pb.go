// Code generated by protoc-gen-gogo.
// source: github.com/openshift/api/config/v1/generated.proto
// DO NOT EDIT!

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		github.com/openshift/api/config/v1/generated.proto

	It has these top-level messages:
		AdmissionPluginConfig
		AuditConfig
		CertInfo
		ClientConnectionOverrides
		EtcdConnectionInfo
		EtcdStorageConfig
		GenericAPIServerConfig
		HTTPServingInfo
		KubeClientConfig
		LeaderElection
		NamedCertificate
		RemoteConnectionInfo
		ServingInfo
		StringSource
		StringSourceSpec
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *AdmissionPluginConfig) Reset()                    { *m = AdmissionPluginConfig{} }
func (*AdmissionPluginConfig) ProtoMessage()               {}
func (*AdmissionPluginConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *AuditConfig) Reset()                    { *m = AuditConfig{} }
func (*AuditConfig) ProtoMessage()               {}
func (*AuditConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func (m *CertInfo) Reset()                    { *m = CertInfo{} }
func (*CertInfo) ProtoMessage()               {}
func (*CertInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{2} }

func (m *ClientConnectionOverrides) Reset()      { *m = ClientConnectionOverrides{} }
func (*ClientConnectionOverrides) ProtoMessage() {}
func (*ClientConnectionOverrides) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{3}
}

func (m *EtcdConnectionInfo) Reset()                    { *m = EtcdConnectionInfo{} }
func (*EtcdConnectionInfo) ProtoMessage()               {}
func (*EtcdConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{4} }

func (m *EtcdStorageConfig) Reset()                    { *m = EtcdStorageConfig{} }
func (*EtcdStorageConfig) ProtoMessage()               {}
func (*EtcdStorageConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func (m *GenericAPIServerConfig) Reset()                    { *m = GenericAPIServerConfig{} }
func (*GenericAPIServerConfig) ProtoMessage()               {}
func (*GenericAPIServerConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *HTTPServingInfo) Reset()                    { *m = HTTPServingInfo{} }
func (*HTTPServingInfo) ProtoMessage()               {}
func (*HTTPServingInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{7} }

func (m *KubeClientConfig) Reset()                    { *m = KubeClientConfig{} }
func (*KubeClientConfig) ProtoMessage()               {}
func (*KubeClientConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *LeaderElection) Reset()                    { *m = LeaderElection{} }
func (*LeaderElection) ProtoMessage()               {}
func (*LeaderElection) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

func (m *NamedCertificate) Reset()                    { *m = NamedCertificate{} }
func (*NamedCertificate) ProtoMessage()               {}
func (*NamedCertificate) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{10} }

func (m *RemoteConnectionInfo) Reset()                    { *m = RemoteConnectionInfo{} }
func (*RemoteConnectionInfo) ProtoMessage()               {}
func (*RemoteConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{11} }

func (m *ServingInfo) Reset()                    { *m = ServingInfo{} }
func (*ServingInfo) ProtoMessage()               {}
func (*ServingInfo) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{12} }

func (m *StringSource) Reset()                    { *m = StringSource{} }
func (*StringSource) ProtoMessage()               {}
func (*StringSource) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{13} }

func (m *StringSourceSpec) Reset()                    { *m = StringSourceSpec{} }
func (*StringSourceSpec) ProtoMessage()               {}
func (*StringSourceSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{14} }

func init() {
	proto.RegisterType((*AdmissionPluginConfig)(nil), "github.com.openshift.api.config.v1.AdmissionPluginConfig")
	proto.RegisterType((*AuditConfig)(nil), "github.com.openshift.api.config.v1.AuditConfig")
	proto.RegisterType((*CertInfo)(nil), "github.com.openshift.api.config.v1.CertInfo")
	proto.RegisterType((*ClientConnectionOverrides)(nil), "github.com.openshift.api.config.v1.ClientConnectionOverrides")
	proto.RegisterType((*EtcdConnectionInfo)(nil), "github.com.openshift.api.config.v1.EtcdConnectionInfo")
	proto.RegisterType((*EtcdStorageConfig)(nil), "github.com.openshift.api.config.v1.EtcdStorageConfig")
	proto.RegisterType((*GenericAPIServerConfig)(nil), "github.com.openshift.api.config.v1.GenericAPIServerConfig")
	proto.RegisterType((*HTTPServingInfo)(nil), "github.com.openshift.api.config.v1.HTTPServingInfo")
	proto.RegisterType((*KubeClientConfig)(nil), "github.com.openshift.api.config.v1.KubeClientConfig")
	proto.RegisterType((*LeaderElection)(nil), "github.com.openshift.api.config.v1.LeaderElection")
	proto.RegisterType((*NamedCertificate)(nil), "github.com.openshift.api.config.v1.NamedCertificate")
	proto.RegisterType((*RemoteConnectionInfo)(nil), "github.com.openshift.api.config.v1.RemoteConnectionInfo")
	proto.RegisterType((*ServingInfo)(nil), "github.com.openshift.api.config.v1.ServingInfo")
	proto.RegisterType((*StringSource)(nil), "github.com.openshift.api.config.v1.StringSource")
	proto.RegisterType((*StringSourceSpec)(nil), "github.com.openshift.api.config.v1.StringSourceSpec")
}
func (m *AdmissionPluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdmissionPluginConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i += copy(dAtA[i:], m.Location)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Configuration.Size()))
	n1, err := m.Configuration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *AuditConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Enabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuditFilePath)))
	i += copy(dAtA[i:], m.AuditFilePath)
	dAtA[i] = 0x18
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaximumFileRetentionDays))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaximumRetainedFiles))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaximumFileSizeMegabytes))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PolicyFile)))
	i += copy(dAtA[i:], m.PolicyFile)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.PolicyConfiguration.Size()))
	n2, err := m.PolicyConfiguration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LogFormat)))
	i += copy(dAtA[i:], m.LogFormat)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.WebHookKubeConfig)))
	i += copy(dAtA[i:], m.WebHookKubeConfig)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.WebHookMode)))
	i += copy(dAtA[i:], m.WebHookMode)
	return i, nil
}

func (m *CertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CertFile)))
	i += copy(dAtA[i:], m.CertFile)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyFile)))
	i += copy(dAtA[i:], m.KeyFile)
	return i, nil
}

func (m *ClientConnectionOverrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionOverrides) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AcceptContentTypes)))
	i += copy(dAtA[i:], m.AcceptContentTypes)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ContentType)))
	i += copy(dAtA[i:], m.ContentType)
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Generated(dAtA, i, uint32(math.Float32bits(float32(m.QPS))))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Burst))
	return i, nil
}

func (m *EtcdConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URLs) > 0 {
		for _, s := range m.URLs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CertInfo.Size()))
	n3, err := m.CertInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *EtcdStorageConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdStorageConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.EtcdConnectionInfo.Size()))
	n4, err := m.EtcdConnectionInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StoragePrefix)))
	i += copy(dAtA[i:], m.StoragePrefix)
	return i, nil
}

func (m *GenericAPIServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericAPIServerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ServingInfo.Size()))
	n5, err := m.ServingInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.CORSAllowedOrigins) > 0 {
		for _, s := range m.CORSAllowedOrigins {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AuditConfig.Size()))
	n6, err := m.AuditConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.StorageConfig.Size()))
	n7, err := m.StorageConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.AdmissionPluginConfig) > 0 {
		keysForAdmissionPluginConfig := make([]string, 0, len(m.AdmissionPluginConfig))
		for k := range m.AdmissionPluginConfig {
			keysForAdmissionPluginConfig = append(keysForAdmissionPluginConfig, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAdmissionPluginConfig)
		for _, k := range keysForAdmissionPluginConfig {
			dAtA[i] = 0x2a
			i++
			v := m.AdmissionPluginConfig[string(k)]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovGenerated(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + msgSize
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64((&v).Size()))
			n8, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n8
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.KubeClientConfig.Size()))
	n9, err := m.KubeClientConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *HTTPServingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPServingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ServingInfo.Size()))
	n10, err := m.ServingInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x10
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxRequestsInFlight))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RequestTimeoutSeconds))
	return i, nil
}

func (m *KubeClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeClientConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeConfig)))
	i += copy(dAtA[i:], m.KubeConfig)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ConnectionOverrides.Size()))
	n11, err := m.ConnectionOverrides.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *LeaderElection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaderElection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.Disable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i += copy(dAtA[i:], m.Namespace)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LeaseDuration.Size()))
	n12, err := m.LeaseDuration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RenewDeadline.Size()))
	n13, err := m.RenewDeadline.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RetryPeriod.Size()))
	n14, err := m.RetryPeriod.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *NamedCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamedCertificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CertInfo.Size()))
	n15, err := m.CertInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *RemoteConnectionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteConnectionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i += copy(dAtA[i:], m.URL)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CertInfo.Size()))
	n16, err := m.CertInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *ServingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BindAddress)))
	i += copy(dAtA[i:], m.BindAddress)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BindNetwork)))
	i += copy(dAtA[i:], m.BindNetwork)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.CertInfo.Size()))
	n17, err := m.CertInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCA)))
	i += copy(dAtA[i:], m.ClientCA)
	if len(m.NamedCertificates) > 0 {
		for _, msg := range m.NamedCertificates {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MinTLSVersion)))
	i += copy(dAtA[i:], m.MinTLSVersion)
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *StringSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.StringSourceSpec.Size()))
	n18, err := m.StringSourceSpec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *StringSourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringSourceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Value)))
	i += copy(dAtA[i:], m.Value)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Env)))
	i += copy(dAtA[i:], m.Env)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.File)))
	i += copy(dAtA[i:], m.File)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KeyFile)))
	i += copy(dAtA[i:], m.KeyFile)
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdmissionPluginConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Configuration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AuditConfig) Size() (n int) {
	var l int
	_ = l
	n += 2
	l = len(m.AuditFilePath)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaximumFileRetentionDays))
	n += 1 + sovGenerated(uint64(m.MaximumRetainedFiles))
	n += 1 + sovGenerated(uint64(m.MaximumFileSizeMegabytes))
	l = len(m.PolicyFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.PolicyConfiguration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LogFormat)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.WebHookKubeConfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.WebHookMode)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CertInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.CertFile)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KeyFile)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClientConnectionOverrides) Size() (n int) {
	var l int
	_ = l
	l = len(m.AcceptContentTypes)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ContentType)
	n += 1 + l + sovGenerated(uint64(l))
	n += 5
	n += 1 + sovGenerated(uint64(m.Burst))
	return n
}

func (m *EtcdConnectionInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.URLs) > 0 {
		for _, s := range m.URLs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CertInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *EtcdStorageConfig) Size() (n int) {
	var l int
	_ = l
	l = m.EtcdConnectionInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.StoragePrefix)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GenericAPIServerConfig) Size() (n int) {
	var l int
	_ = l
	l = m.ServingInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.CORSAllowedOrigins) > 0 {
		for _, s := range m.CORSAllowedOrigins {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.AuditConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.StorageConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.AdmissionPluginConfig) > 0 {
		for k, v := range m.AdmissionPluginConfig {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.KubeClientConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HTTPServingInfo) Size() (n int) {
	var l int
	_ = l
	l = m.ServingInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxRequestsInFlight))
	n += 1 + sovGenerated(uint64(m.RequestTimeoutSeconds))
	return n
}

func (m *KubeClientConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.KubeConfig)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ConnectionOverrides.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LeaderElection) Size() (n int) {
	var l int
	_ = l
	n += 2
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LeaseDuration.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.RenewDeadline.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.RetryPeriod.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NamedCertificate) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.CertInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RemoteConnectionInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CertInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ServingInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.BindAddress)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BindNetwork)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.CertInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientCA)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.NamedCertificates) > 0 {
		for _, e := range m.NamedCertificates {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.MinTLSVersion)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.CipherSuites) > 0 {
		for _, s := range m.CipherSuites {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *StringSource) Size() (n int) {
	var l int
	_ = l
	l = m.StringSourceSpec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StringSourceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Env)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.File)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KeyFile)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AdmissionPluginConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdmissionPluginConfig{`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`Configuration:` + strings.Replace(strings.Replace(this.Configuration.String(), "RawExtension", "k8s_io_apimachinery_pkg_runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuditConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuditConfig{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`AuditFilePath:` + fmt.Sprintf("%v", this.AuditFilePath) + `,`,
		`MaximumFileRetentionDays:` + fmt.Sprintf("%v", this.MaximumFileRetentionDays) + `,`,
		`MaximumRetainedFiles:` + fmt.Sprintf("%v", this.MaximumRetainedFiles) + `,`,
		`MaximumFileSizeMegabytes:` + fmt.Sprintf("%v", this.MaximumFileSizeMegabytes) + `,`,
		`PolicyFile:` + fmt.Sprintf("%v", this.PolicyFile) + `,`,
		`PolicyConfiguration:` + strings.Replace(strings.Replace(this.PolicyConfiguration.String(), "RawExtension", "k8s_io_apimachinery_pkg_runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`LogFormat:` + fmt.Sprintf("%v", this.LogFormat) + `,`,
		`WebHookKubeConfig:` + fmt.Sprintf("%v", this.WebHookKubeConfig) + `,`,
		`WebHookMode:` + fmt.Sprintf("%v", this.WebHookMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertInfo{`,
		`CertFile:` + fmt.Sprintf("%v", this.CertFile) + `,`,
		`KeyFile:` + fmt.Sprintf("%v", this.KeyFile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientConnectionOverrides) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClientConnectionOverrides{`,
		`AcceptContentTypes:` + fmt.Sprintf("%v", this.AcceptContentTypes) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`QPS:` + fmt.Sprintf("%v", this.QPS) + `,`,
		`Burst:` + fmt.Sprintf("%v", this.Burst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EtcdConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdConnectionInfo{`,
		`URLs:` + fmt.Sprintf("%v", this.URLs) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`CertInfo:` + strings.Replace(strings.Replace(this.CertInfo.String(), "CertInfo", "CertInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EtcdStorageConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdStorageConfig{`,
		`EtcdConnectionInfo:` + strings.Replace(strings.Replace(this.EtcdConnectionInfo.String(), "EtcdConnectionInfo", "EtcdConnectionInfo", 1), `&`, ``, 1) + `,`,
		`StoragePrefix:` + fmt.Sprintf("%v", this.StoragePrefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericAPIServerConfig) String() string {
	if this == nil {
		return "nil"
	}
	keysForAdmissionPluginConfig := make([]string, 0, len(this.AdmissionPluginConfig))
	for k := range this.AdmissionPluginConfig {
		keysForAdmissionPluginConfig = append(keysForAdmissionPluginConfig, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAdmissionPluginConfig)
	mapStringForAdmissionPluginConfig := "map[string]AdmissionPluginConfig{"
	for _, k := range keysForAdmissionPluginConfig {
		mapStringForAdmissionPluginConfig += fmt.Sprintf("%v: %v,", k, this.AdmissionPluginConfig[k])
	}
	mapStringForAdmissionPluginConfig += "}"
	s := strings.Join([]string{`&GenericAPIServerConfig{`,
		`ServingInfo:` + strings.Replace(strings.Replace(this.ServingInfo.String(), "HTTPServingInfo", "HTTPServingInfo", 1), `&`, ``, 1) + `,`,
		`CORSAllowedOrigins:` + fmt.Sprintf("%v", this.CORSAllowedOrigins) + `,`,
		`AuditConfig:` + strings.Replace(strings.Replace(this.AuditConfig.String(), "AuditConfig", "AuditConfig", 1), `&`, ``, 1) + `,`,
		`StorageConfig:` + strings.Replace(strings.Replace(this.StorageConfig.String(), "EtcdStorageConfig", "EtcdStorageConfig", 1), `&`, ``, 1) + `,`,
		`AdmissionPluginConfig:` + mapStringForAdmissionPluginConfig + `,`,
		`KubeClientConfig:` + strings.Replace(strings.Replace(this.KubeClientConfig.String(), "KubeClientConfig", "KubeClientConfig", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPServingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPServingInfo{`,
		`ServingInfo:` + strings.Replace(strings.Replace(this.ServingInfo.String(), "ServingInfo", "ServingInfo", 1), `&`, ``, 1) + `,`,
		`MaxRequestsInFlight:` + fmt.Sprintf("%v", this.MaxRequestsInFlight) + `,`,
		`RequestTimeoutSeconds:` + fmt.Sprintf("%v", this.RequestTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeClientConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeClientConfig{`,
		`KubeConfig:` + fmt.Sprintf("%v", this.KubeConfig) + `,`,
		`ConnectionOverrides:` + strings.Replace(strings.Replace(this.ConnectionOverrides.String(), "ClientConnectionOverrides", "ClientConnectionOverrides", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaderElection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaderElection{`,
		`Disable:` + fmt.Sprintf("%v", this.Disable) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LeaseDuration:` + strings.Replace(strings.Replace(this.LeaseDuration.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`RenewDeadline:` + strings.Replace(strings.Replace(this.RenewDeadline.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`RetryPeriod:` + strings.Replace(strings.Replace(this.RetryPeriod.String(), "Duration", "k8s_io_apimachinery_pkg_apis_meta_v1.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamedCertificate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamedCertificate{`,
		`Names:` + fmt.Sprintf("%v", this.Names) + `,`,
		`CertInfo:` + strings.Replace(strings.Replace(this.CertInfo.String(), "CertInfo", "CertInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoteConnectionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteConnectionInfo{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`CertInfo:` + strings.Replace(strings.Replace(this.CertInfo.String(), "CertInfo", "CertInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServingInfo{`,
		`BindAddress:` + fmt.Sprintf("%v", this.BindAddress) + `,`,
		`BindNetwork:` + fmt.Sprintf("%v", this.BindNetwork) + `,`,
		`CertInfo:` + strings.Replace(strings.Replace(this.CertInfo.String(), "CertInfo", "CertInfo", 1), `&`, ``, 1) + `,`,
		`ClientCA:` + fmt.Sprintf("%v", this.ClientCA) + `,`,
		`NamedCertificates:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.NamedCertificates), "NamedCertificate", "NamedCertificate", 1), `&`, ``, 1) + `,`,
		`MinTLSVersion:` + fmt.Sprintf("%v", this.MinTLSVersion) + `,`,
		`CipherSuites:` + fmt.Sprintf("%v", this.CipherSuites) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringSource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringSource{`,
		`StringSourceSpec:` + strings.Replace(strings.Replace(this.StringSourceSpec.String(), "StringSourceSpec", "StringSourceSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringSourceSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringSourceSpec{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`KeyFile:` + fmt.Sprintf("%v", this.KeyFile) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AdmissionPluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdmissionPluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdmissionPluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumFileRetentionDays", wireType)
			}
			m.MaximumFileRetentionDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumFileRetentionDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumRetainedFiles", wireType)
			}
			m.MaximumRetainedFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumRetainedFiles |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumFileSizeMegabytes", wireType)
			}
			m.MaximumFileSizeMegabytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumFileSizeMegabytes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PolicyConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogFormat = LogFormatType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebHookKubeConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebHookKubeConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebHookMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebHookMode = WebHookModeType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionOverrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionOverrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionOverrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptContentTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptContentTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field QPS", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.QPS = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burst", wireType)
			}
			m.Burst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Burst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EtcdConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URLs = append(m.URLs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EtcdStorageConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdStorageConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdStorageConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdConnectionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EtcdConnectionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoragePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericAPIServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericAPIServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericAPIServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CORSAllowedOrigins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CORSAllowedOrigins = append(m.CORSAllowedOrigins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuditConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StorageConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionPluginConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGenerated
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.AdmissionPluginConfig == nil {
				m.AdmissionPluginConfig = make(map[string]AdmissionPluginConfig)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGenerated
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &AdmissionPluginConfig{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.AdmissionPluginConfig[mapkey] = *mapvalue
			} else {
				var mapvalue AdmissionPluginConfig
				m.AdmissionPluginConfig[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeClientConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KubeClientConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPServingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPServingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPServingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequestsInFlight", wireType)
			}
			m.MaxRequestsInFlight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequestsInFlight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimeoutSeconds", wireType)
			}
			m.RequestTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimeoutSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionOverrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionOverrides.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaderElection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaderElection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaderElection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disable = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewDeadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RenewDeadline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RetryPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamedCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamedCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamedCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteConnectionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteConnectionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteConnectionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CertInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamedCertificates = append(m.NamedCertificates, NamedCertificate{})
			if err := m.NamedCertificates[len(m.NamedCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTLSVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinTLSVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherSuites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherSuites = append(m.CipherSuites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringSourceSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StringSourceSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringSourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringSourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringSourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/openshift/api/config/v1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 1671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0x25, 0xbf, 0x34, 0xb2, 0x6f, 0xec, 0x71, 0x1c, 0x28, 0xbe, 0x89, 0x6c, 0xe8, 0x02,
	0x17, 0xbe, 0x40, 0x42, 0x21, 0xce, 0x03, 0xb9, 0xf7, 0xa2, 0x40, 0x25, 0xd9, 0x4e, 0xd2, 0xd8,
	0xb1, 0x3a, 0x72, 0x12, 0x20, 0xe8, 0x86, 0x22, 0x8f, 0xe4, 0x89, 0x28, 0x52, 0x19, 0x92, 0xb2,
	0x15, 0xb4, 0x40, 0xd1, 0xee, 0x82, 0x02, 0xed, 0x1f, 0xe8, 0xaa, 0xbb, 0x00, 0x5d, 0xf4, 0x5f,
	0x64, 0xd7, 0x6c, 0x8a, 0x66, 0x65, 0x34, 0xea, 0x8f, 0x28, 0x90, 0x55, 0x31, 0xc3, 0x91, 0x48,
	0x91, 0x54, 0xa3, 0xf4, 0x81, 0xee, 0xc8, 0xf3, 0xf8, 0xce, 0x99, 0xf3, 0x98, 0x73, 0x06, 0x6d,
	0x35, 0xa9, 0x7b, 0xe4, 0xd5, 0x55, 0xdd, 0x6e, 0x17, 0xed, 0x0e, 0x58, 0xce, 0x11, 0x6d, 0xb8,
	0x45, 0xad, 0x43, 0x8b, 0xba, 0x6d, 0x35, 0x68, 0xb3, 0xd8, 0xbd, 0x52, 0x6c, 0x82, 0x05, 0x4c,
	0x73, 0xc1, 0x50, 0x3b, 0xcc, 0x76, 0x6d, 0x5c, 0x08, 0x74, 0xd4, 0xa1, 0x8e, 0xaa, 0x75, 0xa8,
	0xea, 0xeb, 0xa8, 0xdd, 0x2b, 0x6b, 0x97, 0x43, 0xb8, 0x4d, 0xbb, 0x69, 0x17, 0x85, 0x6a, 0xdd,
	0x6b, 0x88, 0x3f, 0xf1, 0x23, 0xbe, 0x7c, 0xc8, 0xb5, 0x6b, 0xad, 0x9b, 0x8e, 0x4a, 0x6d, 0x6e,
	0xb8, 0xad, 0xe9, 0x47, 0xd4, 0x02, 0xd6, 0x2b, 0x76, 0x5a, 0x4d, 0x4e, 0x70, 0x8a, 0x6d, 0x70,
	0xb5, 0x04, 0x47, 0xd6, 0x8a, 0xe3, 0xb4, 0x98, 0x67, 0xb9, 0xb4, 0x0d, 0x31, 0x85, 0x1b, 0x6f,
	0x53, 0x70, 0xf4, 0x23, 0x68, 0x6b, 0x31, 0xbd, 0xab, 0xe3, 0xf4, 0x3c, 0x97, 0x9a, 0x45, 0x6a,
	0xb9, 0x8e, 0xcb, 0xa2, 0x4a, 0x85, 0xef, 0x14, 0xb4, 0x5a, 0x32, 0xda, 0xd4, 0x71, 0xa8, 0x6d,
	0x55, 0x4d, 0xaf, 0x49, 0xad, 0x8a, 0x88, 0x0f, 0xbe, 0x84, 0xe6, 0x4d, 0x5b, 0xd7, 0x5c, 0x6a,
	0x5b, 0x39, 0x65, 0x43, 0xd9, 0xcc, 0x94, 0x97, 0x5e, 0x9c, 0xae, 0x4f, 0xf5, 0x4f, 0xd7, 0xe7,
	0xf7, 0x24, 0x9d, 0x0c, 0x25, 0xf0, 0x63, 0xb4, 0xe8, 0xc7, 0xd5, 0x63, 0xbe, 0x4a, 0x6a, 0x43,
	0xd9, 0xcc, 0x6e, 0x5d, 0x56, 0x7d, 0xa7, 0xd4, 0xb0, 0x53, 0x6a, 0xa7, 0xd5, 0x54, 0xe5, 0x61,
	0x54, 0xa2, 0x1d, 0xef, 0x9c, 0xb8, 0x60, 0x71, 0xfb, 0xe5, 0x55, 0x69, 0x61, 0xb1, 0x12, 0xc6,
	0x22, 0xa3, 0xd0, 0x85, 0x67, 0xb3, 0x28, 0x5b, 0xf2, 0x0c, 0xea, 0x4a, 0x4f, 0xff, 0x83, 0xe6,
	0xc0, 0xd2, 0xea, 0x26, 0x18, 0xc2, 0xd1, 0xf9, 0xf2, 0x19, 0x09, 0x33, 0xb7, 0xe3, 0x93, 0xc9,
	0x80, 0x8f, 0xff, 0x8f, 0x16, 0x35, 0xae, 0xb9, 0x4b, 0x4d, 0xa8, 0x6a, 0xee, 0x91, 0x70, 0x33,
	0x13, 0xd8, 0x2d, 0x85, 0x99, 0x64, 0x54, 0x16, 0x7f, 0x84, 0x72, 0x6d, 0xed, 0x84, 0xb6, 0xbd,
	0x36, 0x27, 0x11, 0x70, 0xc1, 0xe2, 0xfe, 0x6c, 0x6b, 0x3d, 0x27, 0x97, 0xde, 0x50, 0x36, 0x67,
	0xca, 0x1b, 0x12, 0x27, 0xb7, 0x3f, 0x46, 0x8e, 0x8c, 0x45, 0xc0, 0x55, 0x74, 0x56, 0xf2, 0x08,
	0xb8, 0x1a, 0xb5, 0xc0, 0xe0, 0x32, 0x4e, 0x6e, 0x5a, 0x20, 0x5f, 0x90, 0xc8, 0x67, 0xf7, 0x13,
	0x64, 0x48, 0xa2, 0x66, 0xc4, 0xdf, 0x1a, 0x7d, 0x0a, 0xfb, 0xd0, 0xd4, 0xea, 0x3d, 0x17, 0x9c,
	0xdc, 0xcc, 0x58, 0x7f, 0x47, 0xe4, 0xc8, 0x58, 0x04, 0xbc, 0x85, 0x50, 0xc7, 0x36, 0xa9, 0xde,
	0xe3, 0xac, 0xdc, 0xac, 0x88, 0x23, 0x96, 0x78, 0xa8, 0x3a, 0xe4, 0x90, 0x90, 0x14, 0xfe, 0x18,
	0xad, 0xf8, 0x7f, 0x23, 0xf9, 0xcd, 0xcd, 0xfd, 0x9e, 0x5a, 0xf9, 0xa7, 0xb4, 0xb5, 0x52, 0x8d,
	0x23, 0x92, 0x24, 0x33, 0xf8, 0x7d, 0x94, 0x31, 0xed, 0xe6, 0xae, 0xcd, 0xda, 0x9a, 0x9b, 0x9b,
	0x17, 0x0e, 0x17, 0x24, 0x48, 0x66, 0x6f, 0xc0, 0x78, 0x73, 0xba, 0xbe, 0x38, 0xfc, 0x39, 0xec,
	0x75, 0x80, 0x04, 0x4a, 0xf8, 0x16, 0x5a, 0x3e, 0x86, 0xfa, 0x6d, 0xdb, 0x6e, 0xdd, 0xf5, 0xea,
	0xe0, 0xa3, 0xe7, 0x32, 0x02, 0xe9, 0xbc, 0x44, 0x5a, 0x7e, 0x18, 0x15, 0x20, 0x71, 0x1d, 0x7c,
	0x1b, 0x65, 0x25, 0x71, 0xdf, 0x36, 0x20, 0x87, 0x04, 0xc4, 0xbf, 0x25, 0x44, 0xf6, 0x61, 0xc0,
	0x7a, 0x73, 0xba, 0x7e, 0x26, 0xf4, 0x2b, 0x1c, 0x0a, 0xab, 0x16, 0x74, 0x34, 0x5f, 0x01, 0xe6,
	0xde, 0xb1, 0x1a, 0x36, 0x6f, 0x59, 0x1d, 0x98, 0x28, 0xd8, 0x68, 0xcb, 0x56, 0x24, 0x9d, 0x0c,
	0x25, 0x78, 0xdb, 0xb4, 0xc0, 0xcf, 0x9e, 0xdf, 0x05, 0xc3, 0xb6, 0xb9, 0xeb, 0x93, 0xc9, 0x80,
	0x5f, 0xe8, 0x2b, 0xe8, 0x7c, 0xc5, 0xa4, 0x60, 0xf1, 0x96, 0xb3, 0x40, 0xe7, 0xe1, 0x3c, 0xe8,
	0x02, 0x63, 0xd4, 0x00, 0x07, 0x7f, 0x80, 0xb0, 0xa6, 0xeb, 0xd0, 0xe1, 0x4c, 0x5e, 0xd1, 0xdc,
	0x49, 0x47, 0x3a, 0xb0, 0x26, 0x31, 0x71, 0x29, 0x26, 0x41, 0x12, 0xb4, 0xf0, 0x75, 0x94, 0xd5,
	0x83, 0x7f, 0xe9, 0xd8, 0xca, 0x20, 0x30, 0x21, 0x51, 0x12, 0x96, 0xc3, 0x17, 0x51, 0xfa, 0x49,
	0xc7, 0xef, 0xc2, 0x54, 0x39, 0x2b, 0xc5, 0xd3, 0x1f, 0x56, 0x6b, 0x84, 0xd3, 0xf1, 0xbf, 0xd0,
	0x4c, 0xdd, 0x63, 0x8e, 0x2b, 0x9b, 0x69, 0x51, 0x0a, 0xcc, 0x94, 0x39, 0x91, 0xf8, 0xbc, 0xc2,
	0x73, 0x05, 0xe1, 0x1d, 0x57, 0x37, 0x82, 0x23, 0x8a, 0xa0, 0x5e, 0x40, 0xd3, 0x1e, 0x33, 0xf9,
	0x79, 0xd2, 0x9b, 0x99, 0xf2, 0x7c, 0xff, 0x74, 0x7d, 0xfa, 0x3e, 0xd9, 0x73, 0x88, 0xa0, 0xe2,
	0x35, 0x94, 0xd2, 0x35, 0xe9, 0x26, 0x92, 0xb0, 0xa9, 0x4a, 0x89, 0xa4, 0x74, 0x0d, 0x3f, 0xf2,
	0xd3, 0xc1, 0x51, 0x84, 0x67, 0xd9, 0xad, 0x4b, 0xea, 0xdb, 0xa7, 0x92, 0x3a, 0x48, 0xe7, 0x68,
	0xf2, 0x38, 0x85, 0x0c, 0xf1, 0x0a, 0x3f, 0x28, 0x68, 0x99, 0x3b, 0x5b, 0x73, 0x6d, 0xa6, 0x35,
	0x07, 0x65, 0xf5, 0x99, 0x82, 0x30, 0xc4, 0x8e, 0x20, 0x52, 0x91, 0xdd, 0xba, 0x31, 0x89, 0xf1,
	0x78, 0x00, 0x82, 0x14, 0xc6, 0x79, 0x24, 0xc1, 0x1a, 0xbf, 0x63, 0x1d, 0xdf, 0xab, 0x2a, 0x83,
	0x06, 0x3d, 0x89, 0xde, 0xb1, 0xb5, 0x30, 0x93, 0x8c, 0xca, 0x16, 0x7e, 0x9c, 0x45, 0xe7, 0x6e,
	0xf1, 0x19, 0x45, 0xf5, 0x52, 0xf5, 0x4e, 0x0d, 0x58, 0x17, 0x98, 0x3c, 0xdc, 0x63, 0x94, 0x75,
	0x80, 0x75, 0xa9, 0xd5, 0x0c, 0x1d, 0xea, 0xea, 0x24, 0x87, 0xba, 0x7d, 0x78, 0x58, 0xad, 0x05,
	0xaa, 0x41, 0x3d, 0x85, 0x88, 0x24, 0x0c, 0x8e, 0x77, 0x11, 0xd6, 0x6d, 0xe6, 0x94, 0x4c, 0xd3,
	0x3e, 0x06, 0xe3, 0x80, 0xd1, 0x26, 0xb5, 0x9c, 0x5c, 0x4a, 0x94, 0xc0, 0x39, 0x1e, 0x8b, 0xca,
	0x01, 0xa9, 0x8d, 0x72, 0x49, 0x82, 0x06, 0x6e, 0xa0, 0xac, 0x16, 0x4c, 0x2a, 0x59, 0x05, 0xc5,
	0x49, 0x7c, 0x0e, 0x0d, 0xb8, 0xc0, 0xdf, 0x10, 0x91, 0x84, 0x81, 0x31, 0x1b, 0xc6, 0x5c, 0x5a,
	0x9a, 0x16, 0x96, 0xae, 0x4f, 0x9a, 0xf2, 0x91, 0x32, 0x8a, 0xa5, 0x4a, 0x5a, 0x1c, 0x35, 0x81,
	0x9f, 0x2b, 0x68, 0x55, 0x4b, 0x5a, 0x1d, 0x72, 0x33, 0x1b, 0xe9, 0xcd, 0xec, 0xd6, 0xfd, 0x49,
	0x8c, 0x27, 0xe7, 0x5a, 0x4d, 0x5c, 0x49, 0x76, 0x2c, 0x97, 0xf5, 0xca, 0x17, 0xa5, 0x73, 0xc9,
	0x6b, 0x0b, 0x49, 0x76, 0x09, 0x3f, 0x45, 0x4b, 0x2d, 0x7e, 0xfd, 0x0e, 0x2e, 0x31, 0xee, 0xe6,
	0xac, 0x88, 0xd1, 0xb5, 0x49, 0xdc, 0xbc, 0x1b, 0xd1, 0x2d, 0xe7, 0xa4, 0x17, 0x4b, 0x51, 0x0e,
	0x89, 0xd9, 0x59, 0xfb, 0x5c, 0x41, 0x6b, 0xe3, 0x0f, 0x84, 0x97, 0x50, 0xba, 0x05, 0x3d, 0xff,
	0xbe, 0x24, 0xfc, 0x13, 0x1f, 0xa0, 0x99, 0xae, 0x66, 0x7a, 0x20, 0x97, 0xa8, 0xff, 0x4e, 0x54,
	0x2f, 0x89, 0xd1, 0xf0, 0x71, 0xfe, 0x97, 0xba, 0xa9, 0x14, 0xbe, 0x4e, 0xa1, 0x33, 0x91, 0x46,
	0xe0, 0xe5, 0x19, 0x6f, 0xa9, 0x89, 0xca, 0xf3, 0xdd, 0xda, 0x69, 0x1f, 0xad, 0xb4, 0xb5, 0x13,
	0x02, 0x4f, 0x3c, 0x70, 0x5c, 0xe7, 0x8e, 0xb5, 0x6b, 0xd2, 0xe6, 0x91, 0x2b, 0x8e, 0x97, 0x0e,
	0x06, 0xf9, 0x7e, 0x5c, 0x84, 0x24, 0xe9, 0xe1, 0x1a, 0x5a, 0x65, 0x3e, 0xed, 0x90, 0xb6, 0xc1,
	0xf6, 0xdc, 0x1a, 0xe8, 0xb6, 0x65, 0xf8, 0xf7, 0x7f, 0x3a, 0xa8, 0x10, 0x92, 0x24, 0x44, 0x92,
	0x75, 0xf9, 0x8d, 0x1a, 0x4b, 0x26, 0x5f, 0x72, 0x5a, 0xc1, 0xa4, 0x57, 0x46, 0x97, 0x9c, 0xd0,
	0x88, 0x0f, 0x49, 0xe1, 0x2f, 0x14, 0xb4, 0xa2, 0xc7, 0xc7, 0xa4, 0x4c, 0xe6, 0x7b, 0x13, 0x8d,
	0x80, 0x71, 0xb3, 0x36, 0x08, 0x56, 0x02, 0x93, 0x24, 0x99, 0x2d, 0x7c, 0x9f, 0x46, 0xff, 0xd8,
	0x03, 0xcd, 0x00, 0xb6, 0x63, 0xfa, 0x3c, 0x3e, 0xf9, 0x0d, 0xea, 0xf0, 0x8d, 0x38, 0xba, 0x30,
	0x6f, 0xfb, 0x64, 0x32, 0xe0, 0xe3, 0x22, 0xca, 0x58, 0x5a, 0x1b, 0x9c, 0x8e, 0xa6, 0x0f, 0xa6,
	0xf1, 0xf2, 0x60, 0x67, 0xba, 0x37, 0x60, 0x90, 0x40, 0x06, 0x6f, 0xa0, 0x69, 0xfe, 0x23, 0x52,
	0x91, 0x29, 0x2f, 0x48, 0xd9, 0x69, 0x2e, 0x4b, 0x04, 0x07, 0xb7, 0xd0, 0xa2, 0x09, 0x9a, 0x03,
	0xdb, 0x83, 0xf5, 0xcf, 0xbf, 0xab, 0xd4, 0xb1, 0xeb, 0x1f, 0x7f, 0x5e, 0xa9, 0xfc, 0x79, 0xc5,
	0x43, 0x33, 0xd0, 0x0a, 0x2e, 0xa9, 0xbd, 0x30, 0x18, 0x19, 0xc5, 0xe6, 0xc6, 0x18, 0x58, 0x70,
	0xbc, 0x0d, 0x9a, 0x61, 0x52, 0x0b, 0xc4, 0xe2, 0xfb, 0x07, 0x8c, 0x91, 0x30, 0x18, 0x19, 0xc5,
	0xc6, 0x80, 0xb2, 0x0c, 0x5c, 0xd6, 0xab, 0x02, 0xa3, 0xb6, 0x21, 0xef, 0x97, 0x77, 0x35, 0x35,
	0xec, 0x26, 0x12, 0x40, 0x91, 0x30, 0x6e, 0xe1, 0x4b, 0x05, 0x2d, 0xf1, 0x78, 0x1a, 0x7c, 0x2f,
	0xa0, 0x0d, 0xaa, 0x6b, 0x2e, 0xe0, 0x75, 0x34, 0x23, 0x92, 0x20, 0xf7, 0x94, 0x0c, 0x5f, 0x6f,
	0x44, 0x82, 0x88, 0x4f, 0x1f, 0xd9, 0x46, 0x52, 0x7f, 0xf2, 0x36, 0xf2, 0xad, 0x82, 0xce, 0x12,
	0x68, 0xdb, 0x2e, 0x44, 0x76, 0x81, 0x8b, 0x28, 0xed, 0x31, 0x53, 0x36, 0xce, 0x70, 0x2f, 0xbb,
	0x4f, 0xf6, 0x08, 0xa7, 0xff, 0x6d, 0xdb, 0xd3, 0x2f, 0x69, 0x14, 0xbe, 0xac, 0xf8, 0xd6, 0x59,
	0xa7, 0x96, 0x51, 0x32, 0x0c, 0x06, 0xce, 0x60, 0x75, 0x1d, 0x26, 0xa2, 0x1c, 0xb0, 0x48, 0x58,
	0x6e, 0xa0, 0x76, 0x0f, 0xdc, 0x63, 0x9b, 0xb5, 0xa2, 0xcb, 0x6a, 0x39, 0x60, 0x91, 0xb0, 0xdc,
	0x5f, 0x79, 0x32, 0xf1, 0x04, 0xf0, 0x2f, 0x8f, 0x92, 0xe8, 0xab, 0xf0, 0x13, 0x40, 0xd2, 0xc9,
	0x50, 0x02, 0x7f, 0x82, 0x96, 0xad, 0x48, 0x21, 0x39, 0x72, 0x7a, 0x4f, 0x34, 0x16, 0xa3, 0x55,
	0x18, 0xbc, 0x82, 0xa2, 0x1c, 0x87, 0xc4, 0x2d, 0xf1, 0x4d, 0xb1, 0x4d, 0xad, 0xc3, 0xbd, 0xda,
	0x03, 0x60, 0x7c, 0x74, 0xc9, 0x57, 0xe4, 0xb0, 0xd9, 0xf6, 0xc3, 0x4c, 0x32, 0x2a, 0x8b, 0xaf,
	0xa1, 0x05, 0x9d, 0x76, 0x8e, 0x80, 0xd5, 0x3c, 0xca, 0xdd, 0x9e, 0x13, 0x75, 0xbf, 0xd4, 0x3f,
	0x5d, 0x5f, 0xa8, 0x84, 0xe8, 0x64, 0x44, 0xaa, 0xf0, 0x4c, 0x41, 0x0b, 0x35, 0x97, 0x51, 0xab,
	0x59, 0xb3, 0x3d, 0xa6, 0x03, 0x5f, 0x0c, 0x9c, 0xd0, 0x7f, 0xad, 0x03, 0xba, 0x9c, 0x83, 0x13,
	0x45, 0xa0, 0x16, 0xd1, 0x0d, 0x16, 0x83, 0x28, 0x87, 0xc4, 0xec, 0x14, 0xbe, 0x51, 0x50, 0x4c,
	0x8c, 0xbf, 0x55, 0xfc, 0xe1, 0xef, 0x57, 0xe1, 0xf0, 0xad, 0xf2, 0x80, 0x13, 0xe5, 0x40, 0xe7,
	0x7d, 0x05, 0x56, 0x57, 0x56, 0xdc, 0xb0, 0xaf, 0x76, 0xac, 0x2e, 0xe1, 0x74, 0x7e, 0x09, 0x37,
	0xf8, 0xbb, 0x2e, 0x72, 0x09, 0x8b, 0x47, 0x9d, 0xe0, 0x84, 0x1f, 0x7f, 0xd3, 0xbf, 0xfd, 0xf8,
	0x2b, 0x6f, 0xbe, 0x78, 0x9d, 0x9f, 0x7a, 0xf9, 0x3a, 0x3f, 0xf5, 0xea, 0x75, 0x7e, 0xea, 0xd3,
	0x7e, 0x5e, 0x79, 0xd1, 0xcf, 0x2b, 0x2f, 0xfb, 0x79, 0xe5, 0x55, 0x3f, 0xaf, 0xfc, 0xd4, 0xcf,
	0x2b, 0x5f, 0xfd, 0x9c, 0x9f, 0x7a, 0x94, 0xea, 0x5e, 0xf9, 0x35, 0x00, 0x00, 0xff, 0xff, 0x82,
	0x57, 0xde, 0x3b, 0xa8, 0x13, 0x00, 0x00,
}
