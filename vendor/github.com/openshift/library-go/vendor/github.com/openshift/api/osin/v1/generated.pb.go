// Code generated by protoc-gen-gogo.
// source: github.com/openshift/api/osin/v1/generated.proto
// DO NOT EDIT!

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		github.com/openshift/api/osin/v1/generated.proto

	It has these top-level messages:
		AllowAllPasswordIdentityProvider
		BasicAuthPasswordIdentityProvider
		DenyAllPasswordIdentityProvider
		GitHubIdentityProvider
		GitLabIdentityProvider
		GoogleIdentityProvider
		GrantConfig
		HTPasswdPasswordIdentityProvider
		IdentityProvider
		KeystonePasswordIdentityProvider
		LDAPAttributeMapping
		LDAPPasswordIdentityProvider
		OAuthConfig
		OAuthTemplates
		OpenIDClaims
		OpenIDIdentityProvider
		OpenIDURLs
		RequestHeaderIdentityProvider
		SessionConfig
		TokenConfig
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *AllowAllPasswordIdentityProvider) Reset()      { *m = AllowAllPasswordIdentityProvider{} }
func (*AllowAllPasswordIdentityProvider) ProtoMessage() {}
func (*AllowAllPasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{0}
}

func (m *BasicAuthPasswordIdentityProvider) Reset()      { *m = BasicAuthPasswordIdentityProvider{} }
func (*BasicAuthPasswordIdentityProvider) ProtoMessage() {}
func (*BasicAuthPasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{1}
}

func (m *DenyAllPasswordIdentityProvider) Reset()      { *m = DenyAllPasswordIdentityProvider{} }
func (*DenyAllPasswordIdentityProvider) ProtoMessage() {}
func (*DenyAllPasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{2}
}

func (m *GitHubIdentityProvider) Reset()                    { *m = GitHubIdentityProvider{} }
func (*GitHubIdentityProvider) ProtoMessage()               {}
func (*GitHubIdentityProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{3} }

func (m *GitLabIdentityProvider) Reset()                    { *m = GitLabIdentityProvider{} }
func (*GitLabIdentityProvider) ProtoMessage()               {}
func (*GitLabIdentityProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{4} }

func (m *GoogleIdentityProvider) Reset()                    { *m = GoogleIdentityProvider{} }
func (*GoogleIdentityProvider) ProtoMessage()               {}
func (*GoogleIdentityProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func (m *GrantConfig) Reset()                    { *m = GrantConfig{} }
func (*GrantConfig) ProtoMessage()               {}
func (*GrantConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *HTPasswdPasswordIdentityProvider) Reset()      { *m = HTPasswdPasswordIdentityProvider{} }
func (*HTPasswdPasswordIdentityProvider) ProtoMessage() {}
func (*HTPasswdPasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{7}
}

func (m *IdentityProvider) Reset()                    { *m = IdentityProvider{} }
func (*IdentityProvider) ProtoMessage()               {}
func (*IdentityProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *KeystonePasswordIdentityProvider) Reset()      { *m = KeystonePasswordIdentityProvider{} }
func (*KeystonePasswordIdentityProvider) ProtoMessage() {}
func (*KeystonePasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{9}
}

func (m *LDAPAttributeMapping) Reset()                    { *m = LDAPAttributeMapping{} }
func (*LDAPAttributeMapping) ProtoMessage()               {}
func (*LDAPAttributeMapping) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{10} }

func (m *LDAPPasswordIdentityProvider) Reset()      { *m = LDAPPasswordIdentityProvider{} }
func (*LDAPPasswordIdentityProvider) ProtoMessage() {}
func (*LDAPPasswordIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{11}
}

func (m *OAuthConfig) Reset()                    { *m = OAuthConfig{} }
func (*OAuthConfig) ProtoMessage()               {}
func (*OAuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{12} }

func (m *OAuthTemplates) Reset()                    { *m = OAuthTemplates{} }
func (*OAuthTemplates) ProtoMessage()               {}
func (*OAuthTemplates) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{13} }

func (m *OpenIDClaims) Reset()                    { *m = OpenIDClaims{} }
func (*OpenIDClaims) ProtoMessage()               {}
func (*OpenIDClaims) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{14} }

func (m *OpenIDIdentityProvider) Reset()                    { *m = OpenIDIdentityProvider{} }
func (*OpenIDIdentityProvider) ProtoMessage()               {}
func (*OpenIDIdentityProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{15} }

func (m *OpenIDURLs) Reset()                    { *m = OpenIDURLs{} }
func (*OpenIDURLs) ProtoMessage()               {}
func (*OpenIDURLs) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{16} }

func (m *RequestHeaderIdentityProvider) Reset()      { *m = RequestHeaderIdentityProvider{} }
func (*RequestHeaderIdentityProvider) ProtoMessage() {}
func (*RequestHeaderIdentityProvider) Descriptor() ([]byte, []int) {
	return fileDescriptorGenerated, []int{17}
}

func (m *SessionConfig) Reset()                    { *m = SessionConfig{} }
func (*SessionConfig) ProtoMessage()               {}
func (*SessionConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{18} }

func (m *TokenConfig) Reset()                    { *m = TokenConfig{} }
func (*TokenConfig) ProtoMessage()               {}
func (*TokenConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{19} }

func init() {
	proto.RegisterType((*AllowAllPasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.AllowAllPasswordIdentityProvider")
	proto.RegisterType((*BasicAuthPasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.BasicAuthPasswordIdentityProvider")
	proto.RegisterType((*DenyAllPasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.DenyAllPasswordIdentityProvider")
	proto.RegisterType((*GitHubIdentityProvider)(nil), "github.com.openshift.api.osin.v1.GitHubIdentityProvider")
	proto.RegisterType((*GitLabIdentityProvider)(nil), "github.com.openshift.api.osin.v1.GitLabIdentityProvider")
	proto.RegisterType((*GoogleIdentityProvider)(nil), "github.com.openshift.api.osin.v1.GoogleIdentityProvider")
	proto.RegisterType((*GrantConfig)(nil), "github.com.openshift.api.osin.v1.GrantConfig")
	proto.RegisterType((*HTPasswdPasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.HTPasswdPasswordIdentityProvider")
	proto.RegisterType((*IdentityProvider)(nil), "github.com.openshift.api.osin.v1.IdentityProvider")
	proto.RegisterType((*KeystonePasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.KeystonePasswordIdentityProvider")
	proto.RegisterType((*LDAPAttributeMapping)(nil), "github.com.openshift.api.osin.v1.LDAPAttributeMapping")
	proto.RegisterType((*LDAPPasswordIdentityProvider)(nil), "github.com.openshift.api.osin.v1.LDAPPasswordIdentityProvider")
	proto.RegisterType((*OAuthConfig)(nil), "github.com.openshift.api.osin.v1.OAuthConfig")
	proto.RegisterType((*OAuthTemplates)(nil), "github.com.openshift.api.osin.v1.OAuthTemplates")
	proto.RegisterType((*OpenIDClaims)(nil), "github.com.openshift.api.osin.v1.OpenIDClaims")
	proto.RegisterType((*OpenIDIdentityProvider)(nil), "github.com.openshift.api.osin.v1.OpenIDIdentityProvider")
	proto.RegisterType((*OpenIDURLs)(nil), "github.com.openshift.api.osin.v1.OpenIDURLs")
	proto.RegisterType((*RequestHeaderIdentityProvider)(nil), "github.com.openshift.api.osin.v1.RequestHeaderIdentityProvider")
	proto.RegisterType((*SessionConfig)(nil), "github.com.openshift.api.osin.v1.SessionConfig")
	proto.RegisterType((*TokenConfig)(nil), "github.com.openshift.api.osin.v1.TokenConfig")
}
func (m *AllowAllPasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowAllPasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BasicAuthPasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicAuthPasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RemoteConnectionInfo.Size()))
	n1, err := m.RemoteConnectionInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *DenyAllPasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenyAllPasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GitHubIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitHubIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientID)))
	i += copy(dAtA[i:], m.ClientID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ClientSecret.Size()))
	n2, err := m.ClientSecret.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Organizations) > 0 {
		for _, s := range m.Organizations {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Teams) > 0 {
		for _, s := range m.Teams {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hostname)))
	i += copy(dAtA[i:], m.Hostname)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	return i, nil
}

func (m *GitLabIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GitLabIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i += copy(dAtA[i:], m.URL)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientID)))
	i += copy(dAtA[i:], m.ClientID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ClientSecret.Size()))
	n3, err := m.ClientSecret.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Legacy != nil {
		dAtA[i] = 0x28
		i++
		if *m.Legacy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GoogleIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientID)))
	i += copy(dAtA[i:], m.ClientID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ClientSecret.Size()))
	n4, err := m.ClientSecret.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.HostedDomain)))
	i += copy(dAtA[i:], m.HostedDomain)
	return i, nil
}

func (m *GrantConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrantConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Method)))
	i += copy(dAtA[i:], m.Method)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccountMethod)))
	i += copy(dAtA[i:], m.ServiceAccountMethod)
	return i, nil
}

func (m *HTPasswdPasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTPasswdPasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.File)))
	i += copy(dAtA[i:], m.File)
	return i, nil
}

func (m *IdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	if m.UseAsChallenger {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x18
	i++
	if m.UseAsLogin {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MappingMethod)))
	i += copy(dAtA[i:], m.MappingMethod)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Provider.Size()))
	n5, err := m.Provider.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *KeystonePasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeystonePasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.RemoteConnectionInfo.Size()))
	n6, err := m.RemoteConnectionInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DomainName)))
	i += copy(dAtA[i:], m.DomainName)
	dAtA[i] = 0x18
	i++
	if m.UseKeystoneIdentity {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *LDAPAttributeMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LDAPAttributeMapping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, s := range m.ID {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PreferredUsername) > 0 {
		for _, s := range m.PreferredUsername {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Email) > 0 {
		for _, s := range m.Email {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *LDAPPasswordIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LDAPPasswordIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i += copy(dAtA[i:], m.URL)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BindDN)))
	i += copy(dAtA[i:], m.BindDN)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.BindPassword.Size()))
	n7, err := m.BindPassword.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x20
	i++
	if m.Insecure {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Attributes.Size()))
	n8, err := m.Attributes.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *OAuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MasterCA != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.MasterCA)))
		i += copy(dAtA[i:], *m.MasterCA)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterURL)))
	i += copy(dAtA[i:], m.MasterURL)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterPublicURL)))
	i += copy(dAtA[i:], m.MasterPublicURL)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AssetPublicURL)))
	i += copy(dAtA[i:], m.AssetPublicURL)
	dAtA[i] = 0x28
	i++
	if m.AlwaysShowProviderSelection {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.IdentityProviders) > 0 {
		for _, msg := range m.IdentityProviders {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.GrantConfig.Size()))
	n9, err := m.GrantConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.SessionConfig != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.SessionConfig.Size()))
		n10, err := m.SessionConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenConfig.Size()))
	n11, err := m.TokenConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.Templates != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Templates.Size()))
		n12, err := m.Templates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *OAuthTemplates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthTemplates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Login)))
	i += copy(dAtA[i:], m.Login)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProviderSelection)))
	i += copy(dAtA[i:], m.ProviderSelection)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Error)))
	i += copy(dAtA[i:], m.Error)
	return i, nil
}

func (m *OpenIDClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenIDClaims) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, s := range m.ID {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PreferredUsername) > 0 {
		for _, s := range m.PreferredUsername {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Email) > 0 {
		for _, s := range m.Email {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *OpenIDIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenIDIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CA)))
	i += copy(dAtA[i:], m.CA)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientID)))
	i += copy(dAtA[i:], m.ClientID)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ClientSecret.Size()))
	n13, err := m.ClientSecret.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.ExtraScopes) > 0 {
		for _, s := range m.ExtraScopes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExtraAuthorizeParameters) > 0 {
		keysForExtraAuthorizeParameters := make([]string, 0, len(m.ExtraAuthorizeParameters))
		for k := range m.ExtraAuthorizeParameters {
			keysForExtraAuthorizeParameters = append(keysForExtraAuthorizeParameters, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForExtraAuthorizeParameters)
		for _, k := range keysForExtraAuthorizeParameters {
			dAtA[i] = 0x2a
			i++
			v := m.ExtraAuthorizeParameters[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.URLs.Size()))
	n14, err := m.URLs.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Claims.Size()))
	n15, err := m.Claims.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *OpenIDURLs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenIDURLs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Authorize)))
	i += copy(dAtA[i:], m.Authorize)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserInfo)))
	i += copy(dAtA[i:], m.UserInfo)
	return i, nil
}

func (m *RequestHeaderIdentityProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeaderIdentityProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LoginURL)))
	i += copy(dAtA[i:], m.LoginURL)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ChallengeURL)))
	i += copy(dAtA[i:], m.ChallengeURL)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCA)))
	i += copy(dAtA[i:], m.ClientCA)
	if len(m.ClientCommonNames) > 0 {
		for _, s := range m.ClientCommonNames {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Headers) > 0 {
		for _, s := range m.Headers {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PreferredUsernameHeaders) > 0 {
		for _, s := range m.PreferredUsernameHeaders {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.NameHeaders) > 0 {
		for _, s := range m.NameHeaders {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.EmailHeaders) > 0 {
		for _, s := range m.EmailHeaders {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SessionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionSecretsFile)))
	i += copy(dAtA[i:], m.SessionSecretsFile)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.SessionMaxAgeSeconds))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionName)))
	i += copy(dAtA[i:], m.SessionName)
	return i, nil
}

func (m *TokenConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AuthorizeTokenMaxAgeSeconds))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AccessTokenMaxAgeSeconds))
	if m.AccessTokenInactivityTimeoutSeconds != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(*m.AccessTokenInactivityTimeoutSeconds))
	}
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllowAllPasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BasicAuthPasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = m.RemoteConnectionInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *DenyAllPasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GitHubIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClientSecret.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Organizations) > 0 {
		for _, s := range m.Organizations {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Teams) > 0 {
		for _, s := range m.Teams {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Hostname)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GitLabIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClientSecret.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Legacy != nil {
		n += 2
	}
	return n
}

func (m *GoogleIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClientSecret.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.HostedDomain)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GrantConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Method)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceAccountMethod)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *HTPasswdPasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.File)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *IdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	l = len(m.MappingMethod)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Provider.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KeystonePasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = m.RemoteConnectionInfo.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DomainName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *LDAPAttributeMapping) Size() (n int) {
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, s := range m.ID {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PreferredUsername) > 0 {
		for _, s := range m.PreferredUsername {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Email) > 0 {
		for _, s := range m.Email {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LDAPPasswordIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BindDN)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.BindPassword.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Attributes.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *OAuthConfig) Size() (n int) {
	var l int
	_ = l
	if m.MasterCA != nil {
		l = len(*m.MasterCA)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.MasterURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterPublicURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AssetPublicURL)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if len(m.IdentityProviders) > 0 {
		for _, e := range m.IdentityProviders {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.GrantConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.SessionConfig != nil {
		l = m.SessionConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.TokenConfig.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Templates != nil {
		l = m.Templates.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *OAuthTemplates) Size() (n int) {
	var l int
	_ = l
	l = len(m.Login)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProviderSelection)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Error)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *OpenIDClaims) Size() (n int) {
	var l int
	_ = l
	if len(m.ID) > 0 {
		for _, s := range m.ID {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PreferredUsername) > 0 {
		for _, s := range m.PreferredUsername {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Email) > 0 {
		for _, s := range m.Email {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *OpenIDIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.CA)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ClientSecret.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ExtraScopes) > 0 {
		for _, s := range m.ExtraScopes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ExtraAuthorizeParameters) > 0 {
		for k, v := range m.ExtraAuthorizeParameters {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.URLs.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Claims.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *OpenIDURLs) Size() (n int) {
	var l int
	_ = l
	l = len(m.Authorize)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Token)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UserInfo)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *RequestHeaderIdentityProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.LoginURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ChallengeURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientCA)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ClientCommonNames) > 0 {
		for _, s := range m.ClientCommonNames {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Headers) > 0 {
		for _, s := range m.Headers {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.PreferredUsernameHeaders) > 0 {
		for _, s := range m.PreferredUsernameHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.NameHeaders) > 0 {
		for _, s := range m.NameHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.EmailHeaders) > 0 {
		for _, s := range m.EmailHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *SessionConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionSecretsFile)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.SessionMaxAgeSeconds))
	l = len(m.SessionName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *TokenConfig) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.AuthorizeTokenMaxAgeSeconds))
	n += 1 + sovGenerated(uint64(m.AccessTokenMaxAgeSeconds))
	if m.AccessTokenInactivityTimeoutSeconds != nil {
		n += 1 + sovGenerated(uint64(*m.AccessTokenInactivityTimeoutSeconds))
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AllowAllPasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowAllPasswordIdentityProvider{`,
		`}`,
	}, "")
	return s
}
func (this *BasicAuthPasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasicAuthPasswordIdentityProvider{`,
		`RemoteConnectionInfo:` + strings.Replace(strings.Replace(this.RemoteConnectionInfo.String(), "RemoteConnectionInfo", "github_com_openshift_api_config_v1.RemoteConnectionInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DenyAllPasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DenyAllPasswordIdentityProvider{`,
		`}`,
	}, "")
	return s
}
func (this *GitHubIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitHubIdentityProvider{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`ClientSecret:` + strings.Replace(strings.Replace(this.ClientSecret.String(), "StringSource", "github_com_openshift_api_config_v1.StringSource", 1), `&`, ``, 1) + `,`,
		`Organizations:` + fmt.Sprintf("%v", this.Organizations) + `,`,
		`Teams:` + fmt.Sprintf("%v", this.Teams) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GitLabIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GitLabIdentityProvider{`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`ClientSecret:` + strings.Replace(strings.Replace(this.ClientSecret.String(), "StringSource", "github_com_openshift_api_config_v1.StringSource", 1), `&`, ``, 1) + `,`,
		`Legacy:` + valueToStringGenerated(this.Legacy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleIdentityProvider{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`ClientSecret:` + strings.Replace(strings.Replace(this.ClientSecret.String(), "StringSource", "github_com_openshift_api_config_v1.StringSource", 1), `&`, ``, 1) + `,`,
		`HostedDomain:` + fmt.Sprintf("%v", this.HostedDomain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrantConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrantConfig{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`ServiceAccountMethod:` + fmt.Sprintf("%v", this.ServiceAccountMethod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTPasswdPasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTPasswdPasswordIdentityProvider{`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IdentityProvider{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`UseAsChallenger:` + fmt.Sprintf("%v", this.UseAsChallenger) + `,`,
		`UseAsLogin:` + fmt.Sprintf("%v", this.UseAsLogin) + `,`,
		`MappingMethod:` + fmt.Sprintf("%v", this.MappingMethod) + `,`,
		`Provider:` + strings.Replace(strings.Replace(this.Provider.String(), "RawExtension", "k8s_io_apimachinery_pkg_runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeystonePasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeystonePasswordIdentityProvider{`,
		`RemoteConnectionInfo:` + strings.Replace(strings.Replace(this.RemoteConnectionInfo.String(), "RemoteConnectionInfo", "github_com_openshift_api_config_v1.RemoteConnectionInfo", 1), `&`, ``, 1) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`UseKeystoneIdentity:` + fmt.Sprintf("%v", this.UseKeystoneIdentity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LDAPAttributeMapping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LDAPAttributeMapping{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`PreferredUsername:` + fmt.Sprintf("%v", this.PreferredUsername) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LDAPPasswordIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LDAPPasswordIdentityProvider{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`BindDN:` + fmt.Sprintf("%v", this.BindDN) + `,`,
		`BindPassword:` + strings.Replace(strings.Replace(this.BindPassword.String(), "StringSource", "github_com_openshift_api_config_v1.StringSource", 1), `&`, ``, 1) + `,`,
		`Insecure:` + fmt.Sprintf("%v", this.Insecure) + `,`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`Attributes:` + strings.Replace(strings.Replace(this.Attributes.String(), "LDAPAttributeMapping", "LDAPAttributeMapping", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthConfig{`,
		`MasterCA:` + valueToStringGenerated(this.MasterCA) + `,`,
		`MasterURL:` + fmt.Sprintf("%v", this.MasterURL) + `,`,
		`MasterPublicURL:` + fmt.Sprintf("%v", this.MasterPublicURL) + `,`,
		`AssetPublicURL:` + fmt.Sprintf("%v", this.AssetPublicURL) + `,`,
		`AlwaysShowProviderSelection:` + fmt.Sprintf("%v", this.AlwaysShowProviderSelection) + `,`,
		`IdentityProviders:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.IdentityProviders), "IdentityProvider", "IdentityProvider", 1), `&`, ``, 1) + `,`,
		`GrantConfig:` + strings.Replace(strings.Replace(this.GrantConfig.String(), "GrantConfig", "GrantConfig", 1), `&`, ``, 1) + `,`,
		`SessionConfig:` + strings.Replace(fmt.Sprintf("%v", this.SessionConfig), "SessionConfig", "SessionConfig", 1) + `,`,
		`TokenConfig:` + strings.Replace(strings.Replace(this.TokenConfig.String(), "TokenConfig", "TokenConfig", 1), `&`, ``, 1) + `,`,
		`Templates:` + strings.Replace(fmt.Sprintf("%v", this.Templates), "OAuthTemplates", "OAuthTemplates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthTemplates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthTemplates{`,
		`Login:` + fmt.Sprintf("%v", this.Login) + `,`,
		`ProviderSelection:` + fmt.Sprintf("%v", this.ProviderSelection) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenIDClaims) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenIDClaims{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`PreferredUsername:` + fmt.Sprintf("%v", this.PreferredUsername) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenIDIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	keysForExtraAuthorizeParameters := make([]string, 0, len(this.ExtraAuthorizeParameters))
	for k := range this.ExtraAuthorizeParameters {
		keysForExtraAuthorizeParameters = append(keysForExtraAuthorizeParameters, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExtraAuthorizeParameters)
	mapStringForExtraAuthorizeParameters := "map[string]string{"
	for _, k := range keysForExtraAuthorizeParameters {
		mapStringForExtraAuthorizeParameters += fmt.Sprintf("%v: %v,", k, this.ExtraAuthorizeParameters[k])
	}
	mapStringForExtraAuthorizeParameters += "}"
	s := strings.Join([]string{`&OpenIDIdentityProvider{`,
		`CA:` + fmt.Sprintf("%v", this.CA) + `,`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`ClientSecret:` + strings.Replace(strings.Replace(this.ClientSecret.String(), "StringSource", "github_com_openshift_api_config_v1.StringSource", 1), `&`, ``, 1) + `,`,
		`ExtraScopes:` + fmt.Sprintf("%v", this.ExtraScopes) + `,`,
		`ExtraAuthorizeParameters:` + mapStringForExtraAuthorizeParameters + `,`,
		`URLs:` + strings.Replace(strings.Replace(this.URLs.String(), "OpenIDURLs", "OpenIDURLs", 1), `&`, ``, 1) + `,`,
		`Claims:` + strings.Replace(strings.Replace(this.Claims.String(), "OpenIDClaims", "OpenIDClaims", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenIDURLs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenIDURLs{`,
		`Authorize:` + fmt.Sprintf("%v", this.Authorize) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`UserInfo:` + fmt.Sprintf("%v", this.UserInfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestHeaderIdentityProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHeaderIdentityProvider{`,
		`LoginURL:` + fmt.Sprintf("%v", this.LoginURL) + `,`,
		`ChallengeURL:` + fmt.Sprintf("%v", this.ChallengeURL) + `,`,
		`ClientCA:` + fmt.Sprintf("%v", this.ClientCA) + `,`,
		`ClientCommonNames:` + fmt.Sprintf("%v", this.ClientCommonNames) + `,`,
		`Headers:` + fmt.Sprintf("%v", this.Headers) + `,`,
		`PreferredUsernameHeaders:` + fmt.Sprintf("%v", this.PreferredUsernameHeaders) + `,`,
		`NameHeaders:` + fmt.Sprintf("%v", this.NameHeaders) + `,`,
		`EmailHeaders:` + fmt.Sprintf("%v", this.EmailHeaders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionConfig{`,
		`SessionSecretsFile:` + fmt.Sprintf("%v", this.SessionSecretsFile) + `,`,
		`SessionMaxAgeSeconds:` + fmt.Sprintf("%v", this.SessionMaxAgeSeconds) + `,`,
		`SessionName:` + fmt.Sprintf("%v", this.SessionName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TokenConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TokenConfig{`,
		`AuthorizeTokenMaxAgeSeconds:` + fmt.Sprintf("%v", this.AuthorizeTokenMaxAgeSeconds) + `,`,
		`AccessTokenMaxAgeSeconds:` + fmt.Sprintf("%v", this.AccessTokenMaxAgeSeconds) + `,`,
		`AccessTokenInactivityTimeoutSeconds:` + valueToStringGenerated(this.AccessTokenInactivityTimeoutSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AllowAllPasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowAllPasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowAllPasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicAuthPasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicAuthPasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicAuthPasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteConnectionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemoteConnectionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenyAllPasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenyAllPasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenyAllPasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitHubIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitHubIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitHubIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GitLabIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GitLabIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GitLabIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Legacy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Legacy = &b
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostedDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostedDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = GrantHandlerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountMethod = GrantHandlerType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTPasswdPasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTPasswdPasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTPasswdPasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAsChallenger", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseAsChallenger = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseAsLogin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseAsLogin = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeystonePasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeystonePasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeystonePasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteConnectionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemoteConnectionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseKeystoneIdentity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseKeystoneIdentity = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LDAPAttributeMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LDAPAttributeMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LDAPAttributeMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredUsername = append(m.PreferredUsername, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = append(m.Email, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LDAPPasswordIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LDAPPasswordIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LDAPPasswordIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindDN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindDN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPassword", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BindPassword.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Insecure", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Insecure = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterCA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MasterCA = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPublicURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterPublicURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetPublicURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetPublicURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlwaysShowProviderSelection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlwaysShowProviderSelection = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityProviders = append(m.IdentityProviders, IdentityProvider{})
			if err := m.IdentityProviders[len(m.IdentityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GrantConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionConfig == nil {
				m.SessionConfig = &SessionConfig{}
			}
			if err := m.SessionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Templates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Templates == nil {
				m.Templates = &OAuthTemplates{}
			}
			if err := m.Templates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthTemplates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthTemplates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthTemplates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderSelection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderSelection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenIDClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenIDClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenIDClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredUsername = append(m.PreferredUsername, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = append(m.Email, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenIDIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenIDIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenIDIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraScopes = append(m.ExtraScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraAuthorizeParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthGenerated
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.ExtraAuthorizeParameters == nil {
				m.ExtraAuthorizeParameters = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthGenerated
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.ExtraAuthorizeParameters[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.ExtraAuthorizeParameters[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.URLs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenIDURLs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenIDURLs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenIDURLs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeaderIdentityProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeaderIdentityProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeaderIdentityProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCommonNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCommonNames = append(m.ClientCommonNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredUsernameHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredUsernameHeaders = append(m.PreferredUsernameHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameHeaders = append(m.NameHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailHeaders = append(m.EmailHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionSecretsFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionSecretsFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMaxAgeSeconds", wireType)
			}
			m.SessionMaxAgeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionMaxAgeSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeTokenMaxAgeSeconds", wireType)
			}
			m.AuthorizeTokenMaxAgeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorizeTokenMaxAgeSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTokenMaxAgeSeconds", wireType)
			}
			m.AccessTokenMaxAgeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessTokenMaxAgeSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTokenInactivityTimeoutSeconds", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccessTokenInactivityTimeoutSeconds = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/openshift/api/osin/v1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 1929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x92, 0xa2, 0x4c, 0x3e, 0x4a, 0xb6, 0x34, 0x56, 0x54, 0x56, 0xb6, 0x45, 0x65, 0x8d,
	0xb6, 0x3a, 0x24, 0x4b, 0x4b, 0x4d, 0x52, 0x23, 0x05, 0x0a, 0x90, 0x94, 0x62, 0xa9, 0x91, 0x64,
	0x61, 0x28, 0x05, 0x45, 0x3f, 0x0e, 0xa3, 0xe5, 0x88, 0x9c, 0x68, 0x3f, 0xd8, 0x9d, 0xa1, 0x64,
	0xa6, 0x97, 0xde, 0x0a, 0xf4, 0x94, 0xfe, 0x0d, 0xbd, 0x15, 0x28, 0x52, 0x04, 0xfd, 0x23, 0x7c,
	0x29, 0x90, 0x53, 0x91, 0x13, 0x51, 0xb3, 0x3e, 0xf6, 0x2f, 0xe8, 0xa9, 0x98, 0xd9, 0xd9, 0x0f,
	0x92, 0x4b, 0x4b, 0x46, 0x11, 0x20, 0xb9, 0xed, 0xbe, 0xf7, 0xfb, 0xbd, 0x37, 0x6f, 0xe6, 0x7d,
	0xcc, 0xc0, 0xe3, 0x0e, 0x13, 0xdd, 0xfe, 0x99, 0x65, 0xfb, 0x6e, 0xcd, 0xef, 0x51, 0x8f, 0x77,
	0xd9, 0xb9, 0xa8, 0x91, 0x1e, 0xab, 0xf9, 0x9c, 0x79, 0xb5, 0xcb, 0xad, 0x5a, 0x87, 0x7a, 0x34,
	0x20, 0x82, 0xb6, 0xad, 0x5e, 0xe0, 0x0b, 0x1f, 0x6d, 0x24, 0x0c, 0x2b, 0x66, 0x58, 0xa4, 0xc7,
	0x2c, 0xc9, 0xb0, 0x2e, 0xb7, 0xd6, 0xde, 0x4d, 0xd9, 0xec, 0xf8, 0x1d, 0xbf, 0xa6, 0x88, 0x67,
	0xfd, 0x73, 0xf5, 0xa7, 0x7e, 0xd4, 0x57, 0x68, 0x70, 0x6d, 0x7b, 0xe6, 0x12, 0x6c, 0xdf, 0x3b,
	0x67, 0x9d, 0x8c, 0x45, 0xac, 0x99, 0x17, 0x4f, 0xb8, 0xc5, 0x7c, 0x8d, 0x0a, 0x68, 0x16, 0xe6,
	0xbd, 0x04, 0xe3, 0x12, 0xbb, 0xcb, 0x3c, 0x1a, 0x0c, 0x6a, 0xbd, 0x8b, 0x8e, 0x14, 0xf0, 0x9a,
	0x4b, 0x05, 0xc9, 0x62, 0xd5, 0x66, 0xb1, 0x82, 0xbe, 0x27, 0x98, 0x4b, 0xa7, 0x08, 0x1f, 0x5c,
	0x47, 0xe0, 0x76, 0x97, 0xba, 0x64, 0x8a, 0xf7, 0xe3, 0x59, 0xbc, 0xbe, 0x60, 0x4e, 0x8d, 0x79,
	0x82, 0x8b, 0x60, 0x92, 0x64, 0x9a, 0xb0, 0x51, 0x77, 0x1c, 0xff, 0xaa, 0xee, 0x38, 0xc7, 0x84,
	0xf3, 0x2b, 0x3f, 0x68, 0xef, 0xb7, 0xa9, 0x27, 0x98, 0x18, 0x1c, 0x07, 0xfe, 0x25, 0x6b, 0xd3,
	0xc0, 0xfc, 0x9b, 0x01, 0x6f, 0x37, 0x08, 0x67, 0x76, 0xbd, 0x2f, 0xba, 0xb3, 0x50, 0xe8, 0x8f,
	0x06, 0xac, 0x04, 0xd4, 0xf5, 0x05, 0x6d, 0xfa, 0x9e, 0x47, 0x6d, 0xc1, 0x7c, 0x6f, 0xdf, 0x3b,
	0xf7, 0x2b, 0xc6, 0x86, 0xb1, 0x59, 0xde, 0x7e, 0x62, 0xcd, 0x3c, 0xe6, 0xf0, 0x54, 0xac, 0xcb,
	0x2d, 0x0b, 0x67, 0xf0, 0x1b, 0x0f, 0x5e, 0x0c, 0xab, 0xb7, 0x46, 0xc3, 0xea, 0x4a, 0x96, 0x16,
	0x67, 0xfa, 0x34, 0xdf, 0x86, 0xea, 0x0e, 0xf5, 0x06, 0xaf, 0x8b, 0xea, 0x9f, 0x39, 0x58, 0x7d,
	0xca, 0xc4, 0x5e, 0xff, 0x6c, 0x2a, 0x94, 0x77, 0xa0, 0x68, 0x3b, 0x8c, 0x7a, 0x62, 0x7f, 0x47,
	0xad, 0xbe, 0xd4, 0x58, 0xd2, 0x6b, 0x28, 0x36, 0xb5, 0x1c, 0xc7, 0x08, 0xf4, 0x29, 0x2c, 0x84,
	0xdf, 0x2d, 0x6a, 0x07, 0x54, 0x54, 0x72, 0x2a, 0xde, 0xc7, 0x37, 0x89, 0xb7, 0x25, 0x02, 0xe6,
	0x75, 0x5a, 0x7e, 0x3f, 0xb0, 0x69, 0x63, 0x45, 0xfb, 0x58, 0x68, 0xa6, 0xac, 0xe1, 0x31, 0xdb,
	0xe8, 0x27, 0xb0, 0xe8, 0x07, 0x1d, 0xe2, 0xb1, 0xcf, 0x88, 0x8c, 0x95, 0x57, 0xf2, 0x1b, 0xf9,
	0xcd, 0x52, 0x63, 0x79, 0x34, 0xac, 0x2e, 0x3e, 0x4b, 0x2b, 0xf0, 0x38, 0x0e, 0x55, 0xa1, 0x20,
	0x28, 0x71, 0x79, 0x65, 0x4e, 0x11, 0x4a, 0xa3, 0x61, 0xb5, 0x70, 0x22, 0x05, 0x38, 0x94, 0xcb,
	0x98, 0xbb, 0x3e, 0x17, 0x1e, 0x71, 0x69, 0xa5, 0x30, 0x1e, 0xf3, 0x9e, 0x96, 0xe3, 0x18, 0x81,
	0xd6, 0x20, 0x67, 0x93, 0xca, 0xbc, 0xc2, 0x81, 0xc6, 0xe5, 0x9a, 0x75, 0x9c, 0xb3, 0x89, 0xf9,
	0xa7, 0x70, 0x63, 0x0f, 0xc8, 0xf4, 0xc6, 0x86, 0x34, 0x23, 0x8b, 0x86, 0x1e, 0x42, 0xbe, 0x1f,
	0x38, 0x6a, 0xf7, 0x4a, 0x8d, 0xb2, 0x56, 0xe6, 0x4f, 0xf1, 0x01, 0x96, 0xf2, 0xb1, 0x33, 0xc9,
	0xbf, 0xf1, 0x99, 0xcc, 0x7d, 0x83, 0x67, 0x62, 0xc2, 0xbc, 0x43, 0x3b, 0xc4, 0x1e, 0xa8, 0x7d,
	0x2b, 0x36, 0x60, 0x34, 0xac, 0xce, 0x1f, 0x28, 0x09, 0xd6, 0x1a, 0xf3, 0x3f, 0x06, 0xac, 0x3e,
	0xf5, 0xfd, 0x8e, 0x43, 0xbf, 0x43, 0xc9, 0xf6, 0x04, 0x16, 0xe4, 0x81, 0xd3, 0xf6, 0x8e, 0xef,
	0x12, 0xe6, 0xe9, 0x6d, 0x8f, 0x99, 0x7b, 0x29, 0x1d, 0x1e, 0x43, 0x9a, 0x5f, 0x18, 0x50, 0x7e,
	0x1a, 0x10, 0x4f, 0x34, 0x95, 0x77, 0xf4, 0x21, 0xcc, 0xbb, 0x54, 0x74, 0xfd, 0xb6, 0x8e, 0xd0,
	0xd4, 0x36, 0xe6, 0x0f, 0x95, 0xf4, 0xbf, 0xc3, 0xea, 0x92, 0x82, 0xef, 0x11, 0xaf, 0xed, 0xd0,
	0xe0, 0x64, 0xd0, 0xa3, 0x58, 0x33, 0x50, 0x1b, 0x56, 0x38, 0x0d, 0x2e, 0x99, 0x4d, 0xeb, 0xb6,
	0xed, 0xf7, 0x3d, 0x11, 0x72, 0x74, 0xa2, 0x3c, 0x8e, 0x9a, 0x43, 0x2b, 0x03, 0x93, 0x69, 0x37,
	0xd3, 0x9a, 0xb9, 0x03, 0x1b, 0x7b, 0x27, 0xaa, 0x57, 0xb4, 0x67, 0x76, 0xb8, 0x0d, 0x98, 0x3b,
	0x67, 0x0e, 0xd5, 0x31, 0x2c, 0x68, 0xcf, 0x73, 0x1f, 0x31, 0x87, 0x62, 0xa5, 0x31, 0xbf, 0xc8,
	0xc1, 0x52, 0x16, 0x4d, 0x55, 0xd5, 0x04, 0xed, 0x48, 0x56, 0x94, 0xd2, 0xa0, 0xf7, 0xa1, 0x64,
	0x77, 0x89, 0xe3, 0x50, 0xaf, 0x43, 0x55, 0x5c, 0xc5, 0xc6, 0xf7, 0x34, 0xec, 0xee, 0x29, 0xa7,
	0x75, 0xde, 0x8c, 0xb4, 0x01, 0x4e, 0x90, 0x68, 0x13, 0x0a, 0x8e, 0xdf, 0xd1, 0x07, 0x53, 0x6c,
	0x20, 0x4d, 0x01, 0x45, 0x39, 0x90, 0x1a, 0x1c, 0x02, 0xd0, 0x4f, 0x61, 0xd1, 0x25, 0xbd, 0x1e,
	0xf3, 0x3a, 0x7a, 0xf3, 0xe6, 0xd4, 0x5a, 0xde, 0xd2, 0x8c, 0xc5, 0xc3, 0xb4, 0x12, 0x8f, 0x63,
	0xd1, 0xaf, 0xa0, 0xd8, 0xd3, 0xb1, 0xa8, 0x0c, 0x2f, 0x6f, 0xbf, 0x6b, 0x85, 0xa3, 0xc6, 0x4a,
	0x8f, 0x1a, 0xab, 0x77, 0xd1, 0xb1, 0xf4, 0x88, 0xb2, 0x30, 0xb9, 0xda, 0x7d, 0x2e, 0xa8, 0xc7,
	0x99, 0xef, 0x25, 0xf9, 0x1c, 0x6d, 0x09, 0x8e, 0x0d, 0x9a, 0x5f, 0xe6, 0x60, 0xe3, 0x63, 0x3a,
	0xe0, 0xc2, 0xf7, 0xe8, 0x77, 0x62, 0xb4, 0xa0, 0x6d, 0x80, 0xb6, 0xca, 0x72, 0x79, 0x80, 0x3a,
	0x0b, 0xe3, 0xad, 0xdf, 0x89, 0x35, 0x38, 0x85, 0x42, 0x87, 0x70, 0xaf, 0xcf, 0x69, 0x14, 0x67,
	0x14, 0x9f, 0x3e, 0xb7, 0xfb, 0x9a, 0x7c, 0xef, 0x74, 0x1a, 0x82, 0xb3, 0x78, 0xe6, 0x97, 0x06,
	0xac, 0x1c, 0xec, 0xd4, 0x8f, 0xeb, 0x42, 0x04, 0xec, 0xac, 0x2f, 0xa8, 0x3e, 0x3f, 0xb4, 0x0a,
	0x39, 0x26, 0x6b, 0x4c, 0xb6, 0xf8, 0x79, 0xd9, 0x5b, 0xf7, 0x77, 0x70, 0x8e, 0xb5, 0x51, 0x13,
	0x96, 0x7b, 0x01, 0x3d, 0xa7, 0x41, 0x40, 0xdb, 0xa7, 0x9c, 0x06, 0x5e, 0xb8, 0x74, 0x09, 0x7b,
	0x6b, 0x34, 0xac, 0x2e, 0x1f, 0x4f, 0x2a, 0xf1, 0x34, 0x1e, 0x3d, 0xd0, 0x79, 0x1c, 0x8e, 0x9c,
	0xe2, 0x44, 0x0e, 0x57, 0xa1, 0x40, 0x5d, 0xc2, 0x9c, 0xf4, 0x80, 0xd9, 0x95, 0x02, 0x1c, 0xca,
	0xcd, 0x3f, 0xe4, 0xe1, 0x81, 0x5c, 0xf4, 0xcc, 0x53, 0xd6, 0x03, 0xc0, 0x98, 0x31, 0x00, 0x7e,
	0x08, 0xf3, 0x67, 0xcc, 0x6b, 0xef, 0x1c, 0xe9, 0x3d, 0xbf, 0x13, 0xf5, 0x90, 0x86, 0x92, 0x62,
	0xad, 0x95, 0x1d, 0x52, 0x7e, 0x45, 0x6e, 0xd4, 0x26, 0xff, 0x5f, 0x1d, 0xb2, 0x91, 0xb2, 0x86,
	0xc7, 0x6c, 0xcb, 0xde, 0xcd, 0x3c, 0x4e, 0xed, 0x7e, 0x40, 0x55, 0x49, 0x15, 0x93, 0x5c, 0xdf,
	0xd7, 0x72, 0x1c, 0x23, 0xf4, 0xf4, 0x2b, 0x64, 0x4e, 0xbf, 0x4f, 0x01, 0x48, 0x74, 0x9a, 0x5c,
	0x0d, 0xd6, 0xf2, 0xf6, 0x07, 0xd6, 0x75, 0x37, 0x63, 0x2b, 0x2b, 0x0b, 0x92, 0x6c, 0x8c, 0x35,
	0x1c, 0xa7, 0xac, 0x9b, 0xaf, 0xe6, 0xa1, 0xfc, 0x4c, 0xde, 0xe5, 0x74, 0x77, 0xde, 0x84, 0xa2,
	0x4b, 0xb8, 0xa0, 0x41, 0xb3, 0x1e, 0x35, 0x29, 0x19, 0xc1, 0xa1, 0x96, 0xe1, 0x58, 0x8b, 0x6a,
	0x50, 0x0a, 0xbf, 0x4f, 0xf1, 0x81, 0x3e, 0x86, 0x65, 0xed, 0xac, 0x74, 0x18, 0x29, 0x70, 0x82,
	0x41, 0x75, 0xb8, 0x1b, 0xfe, 0x1c, 0xf7, 0xcf, 0x1c, 0x66, 0x4b, 0x5a, 0x38, 0x45, 0xe2, 0xfe,
	0x76, 0x38, 0xae, 0xc6, 0x93, 0x78, 0xf4, 0x33, 0xb8, 0x43, 0x38, 0xa7, 0x22, 0xb1, 0x10, 0x36,
	0xaf, 0x55, 0x6d, 0xe1, 0x4e, 0x7d, 0x4c, 0x8b, 0x27, 0xd0, 0x88, 0xc2, 0x7d, 0xe2, 0x5c, 0x91,
	0x01, 0x6f, 0x75, 0xfd, 0xab, 0x28, 0xd9, 0x5a, 0xd4, 0x09, 0x4b, 0x5a, 0xcf, 0xec, 0x47, 0xda,
	0xd8, 0xfd, 0xfa, 0x6c, 0x28, 0x7e, 0x9d, 0x1d, 0xf4, 0x3b, 0x58, 0x66, 0x13, 0x19, 0x2d, 0xcf,
	0x31, 0xbf, 0x59, 0xde, 0xde, 0xbe, 0xfe, 0x1c, 0x27, 0x8b, 0xa1, 0xf1, 0x7d, 0xbd, 0xa0, 0xe5,
	0x49, 0x0d, 0xc7, 0xd3, 0x7e, 0x50, 0x1b, 0xca, 0x9d, 0x64, 0xdc, 0x56, 0x6e, 0xeb, 0x2e, 0x7d,
	0xad, 0xdb, 0xd4, 0x8c, 0x6e, 0xdc, 0xd3, 0x1e, 0xd3, 0x83, 0x1b, 0xa7, 0xcd, 0xa2, 0x2e, 0x2c,
	0x72, 0xca, 0x65, 0x4b, 0xd7, 0x7e, 0x8a, 0xca, 0x4f, 0xed, 0x7a, 0x3f, 0xad, 0x34, 0x2d, 0xbc,
	0xad, 0x8e, 0x89, 0xf0, 0xb8, 0x61, 0x19, 0x8f, 0xf0, 0x2f, 0x68, 0xe4, 0xa7, 0x74, 0xd3, 0x78,
	0x4e, 0x12, 0x52, 0x12, 0x4f, 0x4a, 0x88, 0xd3, 0x66, 0xd1, 0x6f, 0xa0, 0x24, 0xa8, 0xdb, 0x73,
	0x88, 0x2c, 0x39, 0xb8, 0xae, 0x4d, 0x44, 0x3e, 0x54, 0xe5, 0x9c, 0x44, 0xbc, 0xc6, 0xa2, 0xcc,
	0xfd, 0xf8, 0x17, 0x27, 0x16, 0xcd, 0x3f, 0x1b, 0x70, 0x67, 0x1c, 0x8c, 0x1e, 0x45, 0x13, 0x3b,
	0x2c, 0xb3, 0x45, 0xbd, 0xc4, 0xc2, 0xd8, 0xb0, 0x7e, 0x2a, 0x9b, 0xf5, 0x64, 0x9a, 0x86, 0xc5,
	0x16, 0x67, 0xc5, 0x74, 0x72, 0x4e, 0x73, 0xa4, 0x37, 0x1a, 0x04, 0x7e, 0xa0, 0x4b, 0x2e, 0xf6,
	0xb6, 0x2b, 0x85, 0x38, 0xd4, 0x99, 0x7f, 0x31, 0x60, 0xe1, 0x59, 0x8f, 0x7a, 0xfb, 0x3b, 0x4d,
	0x87, 0x30, 0x97, 0x7f, 0xab, 0x67, 0xc8, 0x5f, 0x0b, 0xb0, 0x1a, 0x2e, 0xf6, 0x8d, 0x9e, 0x16,
	0xe9, 0x2b, 0x76, 0xee, 0x8d, 0xaf, 0xd8, 0xf9, 0x6f, 0xf0, 0x8a, 0xbd, 0x05, 0x65, 0xfa, 0x5c,
	0x04, 0xa4, 0x65, 0xfb, 0x3d, 0x1a, 0x3d, 0xce, 0xee, 0xca, 0xac, 0xdd, 0x4d, 0xc4, 0x38, 0x8d,
	0x41, 0x7f, 0x37, 0xa0, 0xa2, 0xfe, 0x65, 0x6a, 0xf9, 0x01, 0xfb, 0x8c, 0x1e, 0x93, 0x80, 0xb8,
	0x54, 0xc8, 0x86, 0x53, 0x50, 0x0d, 0xe7, 0x93, 0x1b, 0x64, 0x71, 0xe6, 0x2e, 0x5a, 0xbb, 0x33,
	0x0c, 0xef, 0x7a, 0x22, 0x18, 0x34, 0x36, 0x74, 0x44, 0x95, 0x59, 0x30, 0x3c, 0x73, 0x65, 0xe8,
	0x08, 0xe6, 0xfa, 0x81, 0x13, 0x8d, 0xb6, 0x77, 0x6e, 0xba, 0xc2, 0x53, 0x7c, 0xc0, 0x93, 0x3b,
	0xb3, 0xfc, 0xc3, 0xca, 0x0e, 0xfa, 0x04, 0xe6, 0x6d, 0x95, 0xb0, 0xba, 0xdb, 0x59, 0x37, 0xb5,
	0x18, 0xa6, 0x79, 0x72, 0x7d, 0x08, 0xff, 0xb1, 0xb6, 0xb6, 0xf6, 0x31, 0x3c, 0x7c, 0xed, 0x26,
	0xa0, 0x25, 0xc8, 0x5f, 0xd0, 0x41, 0x98, 0x69, 0x58, 0x7e, 0xa2, 0x15, 0x28, 0x5c, 0x12, 0xa7,
	0xaf, 0x2f, 0x83, 0x38, 0xfc, 0xf9, 0x30, 0xf7, 0xc4, 0x30, 0x3f, 0x37, 0x00, 0x92, 0x38, 0xe4,
	0xf8, 0x24, 0x91, 0x59, 0x9d, 0xaa, 0xf1, 0xf8, 0x8c, 0xfd, 0xe1, 0x04, 0x23, 0x2b, 0x58, 0x35,
	0x2c, 0x9d, 0xb5, 0x71, 0x05, 0xab, 0x96, 0x86, 0x43, 0x9d, 0xcc, 0xee, 0x3e, 0xa7, 0x81, 0xba,
	0x10, 0x4f, 0xbc, 0x8c, 0x4f, 0xb5, 0x1c, 0xc7, 0x08, 0xf3, 0x55, 0x1e, 0x1e, 0x62, 0xfa, 0xdb,
	0x3e, 0xe5, 0x62, 0x8f, 0x92, 0x36, 0x0d, 0xb2, 0x1e, 0xa4, 0xaa, 0x11, 0xc9, 0x51, 0x3b, 0xf1,
	0x20, 0x3d, 0xd0, 0x72, 0x1c, 0x23, 0xe4, 0x23, 0x31, 0x7e, 0x91, 0x24, 0xb7, 0x82, 0x24, 0xf7,
	0x53, 0x3a, 0x3c, 0x86, 0x4c, 0xaa, 0xb2, 0x59, 0xcf, 0x7e, 0xd1, 0xcb, 0xab, 0x47, 0x84, 0x90,
	0xed, 0x47, 0x7f, 0xfb, 0xae, 0xeb, 0xab, 0x6b, 0x75, 0x54, 0x2f, 0xaa, 0xfd, 0x34, 0x27, 0x95,
	0x78, 0x1a, 0x8f, 0x7e, 0x00, 0xb7, 0xbb, 0x2a, 0xe8, 0xb0, 0x52, 0x4a, 0x8d, 0xf2, 0x68, 0x58,
	0xbd, 0x1d, 0xee, 0x03, 0xc7, 0x91, 0x0e, 0xfd, 0x02, 0x2a, 0x53, 0xad, 0x4b, 0x83, 0xd4, 0x48,
	0x2f, 0x35, 0x1e, 0xc8, 0x2a, 0x38, 0x9e, 0x81, 0xc1, 0x33, 0xd9, 0xb2, 0xde, 0xd3, 0xc6, 0x6e,
	0x27, 0xf5, 0x7e, 0x94, 0xe2, 0xa7, 0x31, 0xe8, 0x3d, 0x58, 0x50, 0xcd, 0x2f, 0xe2, 0x14, 0x15,
	0x67, 0x49, 0x6e, 0xee, 0x6e, 0x4a, 0x8e, 0xc7, 0x50, 0xe6, 0x2b, 0x03, 0xc6, 0x47, 0x2c, 0xfa,
	0x39, 0x20, 0x3d, 0x64, 0xc3, 0xde, 0xc3, 0x3f, 0x4a, 0xde, 0xb2, 0x6b, 0x7a, 0xe3, 0x51, 0x6b,
	0x0a, 0x81, 0x33, 0x58, 0xe8, 0x58, 0xbe, 0xc9, 0x95, 0xf4, 0x90, 0x3c, 0xaf, 0x77, 0x68, 0x8b,
	0xda, 0xbe, 0xd7, 0xe6, 0xea, 0xf0, 0x0b, 0xc9, 0xab, 0xaa, 0x95, 0x81, 0xc1, 0x99, 0x4c, 0xf4,
	0x3e, 0x94, 0xb5, 0xfc, 0x28, 0x9c, 0x0f, 0x72, 0x59, 0xf1, 0x08, 0x6f, 0x25, 0x2a, 0x9c, 0xc6,
	0x99, 0xff, 0xc8, 0x41, 0x7a, 0xbe, 0xab, 0xcb, 0x5e, 0x54, 0x3d, 0x4a, 0x3e, 0xbe, 0x3e, 0x43,
	0xad, 0x2f, 0xb9, 0xec, 0xcd, 0x86, 0xe2, 0xd7, 0xd9, 0x41, 0xbf, 0x86, 0x0a, 0xb1, 0x6d, 0xca,
	0x79, 0x86, 0x8f, 0x70, 0x0f, 0xe2, 0x56, 0x59, 0x9f, 0x81, 0xc3, 0x33, 0x2d, 0xa0, 0x01, 0x3c,
	0x4a, 0xe9, 0xf6, 0x3d, 0x62, 0x0b, 0x76, 0xc9, 0xc4, 0xe0, 0x84, 0xb9, 0xd4, 0xef, 0x8b, 0xc8,
	0x51, 0x5e, 0x39, 0xfa, 0xd1, 0x68, 0x58, 0x7d, 0x54, 0xbf, 0x1e, 0x8e, 0x6f, 0x62, 0xb3, 0xb1,
	0xf9, 0xe2, 0xe5, 0xfa, 0xad, 0xaf, 0x5e, 0xae, 0xdf, 0xfa, 0xfa, 0xe5, 0xfa, 0xad, 0xdf, 0x8f,
	0xd6, 0x8d, 0x17, 0xa3, 0x75, 0xe3, 0xab, 0xd1, 0xba, 0xf1, 0xf5, 0x68, 0xdd, 0xf8, 0xd7, 0x68,
	0xdd, 0xf8, 0xfc, 0xdf, 0xeb, 0xb7, 0x7e, 0x99, 0xbb, 0xdc, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x54, 0xf0, 0x74, 0x75, 0xe8, 0x17, 0x00, 0x00,
}
