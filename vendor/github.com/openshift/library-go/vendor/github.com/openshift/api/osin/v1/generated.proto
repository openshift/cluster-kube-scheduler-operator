
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.api.osin.v1;

import "github.com/openshift/api/config/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// AllowAllPasswordIdentityProvider provides identities for users authenticating using non-empty passwords
message AllowAllPasswordIdentityProvider {
}

// BasicAuthPasswordIdentityProvider provides identities for users authenticating using HTTP basic auth credentials
message BasicAuthPasswordIdentityProvider {
  // RemoteConnectionInfo contains information about how to connect to the external basic auth server
  optional github.com.openshift.api.config.v1.RemoteConnectionInfo remoteConnectionInfo = 1;
}

// DenyAllPasswordIdentityProvider provides no identities for users
message DenyAllPasswordIdentityProvider {
}

// GitHubIdentityProvider provides identities for users authenticating using GitHub credentials
message GitHubIdentityProvider {
  // clientID is the oauth client ID
  optional string clientID = 1;

  // clientSecret is the oauth client secret
  optional github.com.openshift.api.config.v1.StringSource clientSecret = 2;

  // organizations optionally restricts which organizations are allowed to log in
  repeated string organizations = 3;

  // teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.
  repeated string teams = 4;

  // hostname is the optional domain (e.g. "mycompany.com") for use with a hosted instance of GitHub Enterprise.
  // It must match the GitHub Enterprise settings value that is configured at /setup/settings#hostname.
  optional string hostname = 5;

  // ca is the optional trusted certificate authority bundle to use when making requests to the server.
  // If empty, the default system roots are used.  This can only be configured when hostname is set to a non-empty value.
  optional string ca = 6;
}

// GitLabIdentityProvider provides identities for users authenticating using GitLab credentials
message GitLabIdentityProvider {
  // ca is the optional trusted certificate authority bundle to use when making requests to the server
  // If empty, the default system roots are used
  optional string ca = 1;

  // url is the oauth server base URL
  optional string url = 2;

  // clientID is the oauth client ID
  optional string clientID = 3;

  // clientSecret is the oauth client secret
  optional github.com.openshift.api.config.v1.StringSource clientSecret = 4;

  // legacy determines if OAuth2 or OIDC should be used
  // If true, OAuth2 is used
  // If false, OIDC is used
  // If nil and the URL's host is gitlab.com, OIDC is used
  // Otherwise, OAuth2 is used
  // In a future release, nil will default to using OIDC
  // Eventually this flag will be removed and only OIDC will be used
  optional bool legacy = 5;
}

// GoogleIdentityProvider provides identities for users authenticating using Google credentials
message GoogleIdentityProvider {
  // clientID is the oauth client ID
  optional string clientID = 1;

  // clientSecret is the oauth client secret
  optional github.com.openshift.api.config.v1.StringSource clientSecret = 2;

  // hostedDomain is the optional Google App domain (e.g. "mycompany.com") to restrict logins to
  optional string hostedDomain = 3;
}

// GrantConfig holds the necessary configuration options for grant handlers
message GrantConfig {
  // method determines the default strategy to use when an OAuth client requests a grant.
  // This method will be used only if the specific OAuth client doesn't provide a strategy
  // of their own. Valid grant handling methods are:
  //  - auto:   always approves grant requests, useful for trusted clients
  //  - prompt: prompts the end user for approval of grant requests, useful for third-party clients
  //  - deny:   always denies grant requests, useful for black-listed clients
  optional string method = 1;

  // serviceAccountMethod is used for determining client authorization for service account oauth client.
  // It must be either: deny, prompt
  optional string serviceAccountMethod = 2;
}

// HTPasswdPasswordIdentityProvider provides identities for users authenticating using htpasswd credentials
message HTPasswdPasswordIdentityProvider {
  // file is a reference to your htpasswd file
  optional string file = 1;
}

// IdentityProvider provides identities for users authenticating using credentials
message IdentityProvider {
  // name is used to qualify the identities returned by this provider
  optional string name = 1;

  // challenge indicates whether to issue WWW-Authenticate challenges for this provider
  optional bool challenge = 2;

  // login indicates whether to use this identity provider for unauthenticated browsers to login against
  optional bool login = 3;

  // mappingMethod determines how identities from this provider are mapped to users
  optional string mappingMethod = 4;

  // provider contains the information about how to set up a specific identity provider
  optional k8s.io.apimachinery.pkg.runtime.RawExtension provider = 5;
}

// KeystonePasswordIdentityProvider provides identities for users authenticating using keystone password credentials
message KeystonePasswordIdentityProvider {
  // RemoteConnectionInfo contains information about how to connect to the keystone server
  optional github.com.openshift.api.config.v1.RemoteConnectionInfo remoteConnectionInfo = 1;

  // domainName is required for keystone v3
  optional string domainName = 2;

  // useKeystoneIdentity flag indicates that user should be authenticated by keystone ID, not by username
  optional bool useKeystoneIdentity = 3;
}

// LDAPAttributeMapping maps LDAP attributes to OpenShift identity fields
message LDAPAttributeMapping {
  // id is the list of attributes whose values should be used as the user ID. Required.
  // LDAP standard identity attribute is "dn"
  repeated string id = 1;

  // preferredUsername is the list of attributes whose values should be used as the preferred username.
  // LDAP standard login attribute is "uid"
  repeated string preferredUsername = 2;

  // name is the list of attributes whose values should be used as the display name. Optional.
  // If unspecified, no display name is set for the identity
  // LDAP standard display name attribute is "cn"
  repeated string name = 3;

  // email is the list of attributes whose values should be used as the email address. Optional.
  // If unspecified, no email is set for the identity
  repeated string email = 4;
}

// LDAPPasswordIdentityProvider provides identities for users authenticating using LDAP credentials
message LDAPPasswordIdentityProvider {
  // url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is
  //    ldap://host:port/basedn?attribute?scope?filter
  optional string url = 1;

  // bindDN is an optional DN to bind with during the search phase.
  optional string bindDN = 2;

  // bindPassword is an optional password to bind with during the search phase.
  optional github.com.openshift.api.config.v1.StringSource bindPassword = 3;

  // insecure, if true, indicates the connection should not use TLS.
  // Cannot be set to true with a URL scheme of "ldaps://"
  // If false, "ldaps://" URLs connect using TLS, and "ldap://" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830
  optional bool insecure = 4;

  // ca is the optional trusted certificate authority bundle to use when making requests to the server
  // If empty, the default system roots are used
  optional string ca = 5;

  // attributes maps LDAP attributes to identities
  optional LDAPAttributeMapping attributes = 6;
}

// OAuthConfig holds the necessary configuration options for OAuth authentication
message OAuthConfig {
  // masterCA is the CA for verifying the TLS connection back to the MasterURL.
  optional string masterCA = 1;

  // masterURL is used for making server-to-server calls to exchange authorization codes for access tokens
  optional string masterURL = 2;

  // masterPublicURL is used for building valid client redirect URLs for internal and external access
  optional string masterPublicURL = 3;

  // assetPublicURL is used for building valid client redirect URLs for external access
  optional string assetPublicURL = 4;

  // alwaysShowProviderSelection will force the provider selection page to render even when there is only a single provider.
  optional bool alwaysShowProviderSelection = 5;

  // identityProviders is an ordered list of ways for a user to identify themselves
  repeated IdentityProvider identityProviders = 6;

  // grantConfig describes how to handle grants
  optional GrantConfig grantConfig = 7;

  // sessionConfig hold information about configuring sessions.
  optional SessionConfig sessionConfig = 8;

  // tokenConfig contains options for authorization and access tokens
  optional TokenConfig tokenConfig = 9;

  // templates allow you to customize pages like the login page.
  optional OAuthTemplates templates = 10;
}

// OAuthTemplates allow for customization of pages like the login page
message OAuthTemplates {
  // login is a path to a file containing a go template used to render the login page.
  // If unspecified, the default login page is used.
  optional string login = 1;

  // providerSelection is a path to a file containing a go template used to render the provider selection page.
  // If unspecified, the default provider selection page is used.
  optional string providerSelection = 2;

  // error is a path to a file containing a go template used to render error pages during the authentication or grant flow
  // If unspecified, the default error page is used.
  optional string error = 3;
}

// OpenIDClaims contains a list of OpenID claims to use when authenticating with an OpenID identity provider
message OpenIDClaims {
  // id is the list of claims whose values should be used as the user ID. Required.
  // OpenID standard identity claim is "sub"
  repeated string id = 1;

  // preferredUsername is the list of claims whose values should be used as the preferred username.
  // If unspecified, the preferred username is determined from the value of the id claim
  repeated string preferredUsername = 2;

  // name is the list of claims whose values should be used as the display name. Optional.
  // If unspecified, no display name is set for the identity
  repeated string name = 3;

  // email is the list of claims whose values should be used as the email address. Optional.
  // If unspecified, no email is set for the identity
  repeated string email = 4;
}

// OpenIDIdentityProvider provides identities for users authenticating using OpenID credentials
message OpenIDIdentityProvider {
  // ca is the optional trusted certificate authority bundle to use when making requests to the server
  // If empty, the default system roots are used
  optional string ca = 1;

  // clientID is the oauth client ID
  optional string clientID = 2;

  // clientSecret is the oauth client secret
  optional github.com.openshift.api.config.v1.StringSource clientSecret = 3;

  // extraScopes are any scopes to request in addition to the standard "openid" scope.
  repeated string extraScopes = 4;

  // extraAuthorizeParameters are any custom parameters to add to the authorize request.
  map<string, string> extraAuthorizeParameters = 5;

  // urls to use to authenticate
  optional OpenIDURLs urls = 6;

  // claims mappings
  optional OpenIDClaims claims = 7;
}

// OpenIDURLs are URLs to use when authenticating with an OpenID identity provider
message OpenIDURLs {
  // authorize is the oauth authorization URL
  optional string authorize = 1;

  // token is the oauth token granting URL
  optional string token = 2;

  // userInfo is the optional userinfo URL.
  // If present, a granted access_token is used to request claims
  // If empty, a granted id_token is parsed for claims
  optional string userInfo = 3;
}

// RequestHeaderIdentityProvider provides identities for users authenticating using request header credentials
message RequestHeaderIdentityProvider {
  // loginURL is a URL to redirect unauthenticated /authorize requests to
  // Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here
  // ${url} is replaced with the current URL, escaped to be safe in a query parameter
  //   https://www.example.com/sso-login?then=${url}
  // ${query} is replaced with the current query string
  //   https://www.example.com/auth-proxy/oauth/authorize?${query}
  optional string loginURL = 1;

  // challengeURL is a URL to redirect unauthenticated /authorize requests to
  // Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here
  // ${url} is replaced with the current URL, escaped to be safe in a query parameter
  //   https://www.example.com/sso-login?then=${url}
  // ${query} is replaced with the current query string
  //   https://www.example.com/auth-proxy/oauth/authorize?${query}
  optional string challengeURL = 2;

  // clientCA is a file with the trusted signer certs.  If empty, no request verification is done, and any direct request to the OAuth server can impersonate any identity from this provider, merely by setting a request header.
  optional string clientCA = 3;

  // clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.
  repeated string clientCommonNames = 4;

  // headers is the set of headers to check for identity information
  repeated string headers = 5;

  // preferredUsernameHeaders is the set of headers to check for the preferred username
  repeated string preferredUsernameHeaders = 6;

  // nameHeaders is the set of headers to check for the display name
  repeated string nameHeaders = 7;

  // emailHeaders is the set of headers to check for the email address
  repeated string emailHeaders = 8;
}

// SessionConfig specifies options for cookie-based sessions. Used by AuthRequestHandlerSession
message SessionConfig {
  // sessionSecretsFile is a reference to a file containing a serialized SessionSecrets object
  // If no file is specified, a random signing and encryption key are generated at each server start
  optional string sessionSecretsFile = 1;

  // sessionMaxAgeSeconds specifies how long created sessions last. Used by AuthRequestHandlerSession
  optional int32 sessionMaxAgeSeconds = 2;

  // sessionName is the cookie name used to store the session
  optional string sessionName = 3;
}

// TokenConfig holds the necessary configuration options for authorization and access tokens
message TokenConfig {
  // authorizeTokenMaxAgeSeconds defines the maximum age of authorize tokens
  optional int32 authorizeTokenMaxAgeSeconds = 1;

  // accessTokenMaxAgeSeconds defines the maximum age of access tokens
  optional int32 accessTokenMaxAgeSeconds = 2;

  // accessTokenInactivityTimeoutSeconds defined the default token
  // inactivity timeout for tokens granted by any client.
  // Setting it to nil means the feature is completely disabled (default)
  // The default setting can be overriden on OAuthClient basis.
  // The value represents the maximum amount of time that can occur between
  // consecutive uses of the token. Tokens become invalid if they are not
  // used within this temporal window. The user will need to acquire a new
  // token to regain access once a token times out.
  // Valid values are:
  // - 0: Tokens never time out
  // - X: Tokens time out if there is no activity for X seconds
  // The current minimum allowed value for X is 300 (5 minutes)
  optional int32 accessTokenInactivityTimeoutSeconds = 3;
}

